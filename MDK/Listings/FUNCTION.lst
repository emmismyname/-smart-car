C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE FUNCTION
OBJECT MODULE PLACED IN .\Out_flie\FUNCTION.obj
COMPILER INVOKED BY: D:\Keil_80251\C251\BIN\C251.EXE ..\LIB\peripheral\FUNCTION.c XSMALL INTR2 BROWSE INCDIR(..\LIB\star
                    -tup;..\LIB\libraries;..\LIB\peripheral;..\USER\inc) DEBUG PRINT(.\Listings\FUNCTION.lst) TABS(2) OBJECT(.\Out_flie\FUNCT
                    -ION.obj) 

stmt  level    source

    1          
    2          /********************************************************************************************************
             -*************
    3           * @file          »ù´¡³£ÓÃº¯Êý
    4           * @date          2024-03-06
    5           * @note          ÑÓÊ±¡¢ÀàÐÍ×ª»»¡¢½øÖÆ×ª»»¡¢´òÓ¡º¯Êý
    6           ********************************************************************************************************
             -************/
    7          
    8          
    9          #include <stdarg.h>
   10          #include <string.h>
   11          
   12          #include "FUNCTION.h"
   13          
   14          //-------------------------------------------------------------------------------------------------------
             -------------
   15          // º¯Êý¼ò½é     »ñÈ¡ÕûÐÍÊýµÄ×î´ó¹«Ô¼Êý ¾ÅÕÂËãÊõÖ®¸üÏà¼õËðÊõ
   16          // ²ÎÊýËµÃ÷     num1            Êý×Ö1
   17          // ²ÎÊýËµÃ÷     num2            Êý×Ö2
   18          // ·µ»Ø²ÎÊý     uint32          ×î´ó¹«Ô¼Êý
   19          // Ê¹ÓÃÊ¾Àý     return func_get_greatest_common_divisor(144, 36);               // »ñÈ¡ 144 Óë 36 µÄ×î´ó¹
             -«Ô¼Êý
   20          // ±¸×¢ÐÅÏ¢     
   21          //-------------------------------------------------------------------------------------------------------
             -------------
   22          uint32 func_get_greatest_common_divisor (uint32 num1, uint32 num2)
   23          {
   24   1          while(num1 != num2)
   25   1          {
   26   2              if(num1 > num2)
   27   2              {
   28   3                  num1 = num1 - num2;
   29   3              }
   30   2              if(num1 < num2)
   31   2              {
   32   3                  num2 = num2 - num1;
   33   3              }
   34   2          }
   35   1          return num1;
   36   1      }
   37          
   38          //-------------------------------------------------------------------------------------------------------
             -------------
   39          // º¯Êý¼ò½é     Èí¼þÑÓÊ±
   40          // ²ÎÊýËµÃ÷     t               ÑÓÊ±Ê±¼ä
   41          // ·µ»Ø²ÎÊý     void
   42          // Ê¹ÓÃÊ¾Àý     func_soft_delay(100);
   43          // ±¸×¢ÐÅÏ¢     
   44          //-------------------------------------------------------------------------------------------------------
             -------------
   45          void func_soft_delay (volatile long t)
   46          {
   47   1          while(t --);
   48   1      }
   49          
   50          //-------------------------------------------------------------------------------------------------------
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 2   

             -------------
   51          // º¯Êý¼ò½é     ×Ö·û´®×ªÕûÐÎÊý×Ö Êý¾Ý·¶Î§ÊÇ [-32768,32767]
   52          // ²ÎÊýËµÃ÷     *str            ´«Èë×Ö·û´® ¿É´ø·ûºÅ
   53          // ·µ»Ø²ÎÊý     int32           ×ª»»ºóµÄÊý¾Ý          
   54          // Ê¹ÓÃÊ¾Àý     int32 dat = func_str_to_int("-100");
   55          // ±¸×¢ÐÅÏ¢     
   56          //-------------------------------------------------------------------------------------------------------
             -------------
   57          int32 func_str_to_int (char *str)
   58          {
   59   1      
   60   1          uint8 sign = 0;                                                             // ±ê¼Ç·ûºÅ 0-ÕýÊý 1-¸ºÊý
   61   1          int32 temp = 0;                                                             // ÁÙÊ±¼ÆËã±äÁ¿
   62   1          do
   63   1          {
   64   2              if(NULL == str)
   65   2              {
   66   3                  break;
   67   3              }
   68   2      
   69   2              if('-' == *str)                                                         // Èç¹ûµÚÒ»¸ö×Ö·ûÊÇ¸ººÅ
   70   2              {
   71   3                  sign = 1;                                                           // ±ê¼Ç¸ºÊý
   72   3                  str ++;
   73   3              }
   74   2              else if('+' == *str)                                                    // Èç¹ûµÚÒ»¸ö×Ö·ûÊÇÕýºÅ
   75   2              {
   76   3                  str ++;
   77   3              }
   78   2      
   79   2              while(('0' <= *str) && ('9' >= *str))                                   // È·¶¨ÕâÊÇ¸öÊý×Ö
   80   2              {
   81   3                  temp = temp * 10 + ((uint8)(*str) - 0x30);                          // ¼ÆËãÊýÖµ
   82   3                  str ++;
   83   3              }
   84   2      
   85   2              if(sign)
   86   2              {
   87   3                  temp = -temp;
   88   3              }
   89   2          }while(0);
   90   1          return temp;
   91   1      }
   92          
   93          //-------------------------------------------------------------------------------------------------------
             -------------
   94          // º¯Êý¼ò½é     ÕûÐÎÊý×Ö×ª×Ö·û´® Êý¾Ý·¶Î§ÊÇ [-32768,32767]
   95          // ²ÎÊýËµÃ÷     *str            ×Ö·û´®Ö¸Õë
   96          // ²ÎÊýËµÃ÷     number          ´«ÈëµÄÊý¾Ý
   97          // ·µ»Ø²ÎÊý     void
   98          // Ê¹ÓÃÊ¾Àý     func_int_to_str(data_buffer, -300);
   99          // ±¸×¢ÐÅÏ¢     
  100          //-------------------------------------------------------------------------------------------------------
             -------------
  101          void func_int_to_str (char *str, int32 number)
  102          {
  103   1          uint8 data_temp[16];                                                        // »º³åÇø
  104   1          uint8 dat_bit = 0;                                                              // Êý×ÖÎ»Êý
  105   1          int32 number_temp = 0;
  106   1      
  107   1          do
  108   1          {
  109   2              if(NULL == str)
  110   2              {
  111   3                  break;
  112   3              }
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 3   

  113   2      
  114   2              if(0 > number)                                                          // ¸ºÊý
  115   2              {
  116   3                  *str ++ = '-';
  117   3                  number = -number;
  118   3              }
  119   2              else if(0 == number)                                                    // »òÕßÕâÊÇ¸ö 0
  120   2              {
  121   3                  *str = '0';
  122   3                  break;
  123   3              }
  124   2      
  125   2              while(0 != number)                                                      // Ñ­»·Ö±µ½ÊýÖµ¹éÁã
  126   2              {
  127   3                  number_temp = number % 10;
  128   3                  data_temp[dat_bit ++] = func_abs(number_temp);                          // µ¹Ðò½«ÊýÖµÌáÈ¡³öÀ´
  129   3                  number /= 10;                                                       // Ï÷¼õ±»ÌáÈ¡µÄ¸öÎ»Êý
  130   3              }
  131   2              while(0 != dat_bit)                                                         // ÌáÈ¡µÄÊý×Ö¸öÊýµÝ¼õ
             -´¦Àí
  132   2              {
  133   3                  *str ++ = (data_temp[dat_bit - 1] + 0x30);                              // ½«Êý×Ö´Óµ¹ÐòÊý×éÖÐ
             -µ¹ÐòÈ¡³ö ±ä³ÉÕýÐò·ÅÈë×Ö·û´®
  134   3                  dat_bit --;
  135   3              }
  136   2          }while(0);
  137   1      }
  138          
  139          //-------------------------------------------------------------------------------------------------------
             -------------
  140          // º¯Êý¼ò½é     ×Ö·û´®×ªÕûÐÎÊý×Ö Êý¾Ý·¶Î§ÊÇ [0,65535]
  141          // ²ÎÊýËµÃ÷     *str            ´«Èë×Ö·û´® ÎÞ·ûºÅ
  142          // ·µ»Ø²ÎÊý     uint32          ×ª»»ºóµÄÊý¾Ý          
  143          // Ê¹ÓÃÊ¾Àý     uint32 dat = func_str_to_uint("100");
  144          // ±¸×¢ÐÅÏ¢     
  145          //-------------------------------------------------------------------------------------------------------
             -------------
  146          uint32 func_str_to_uint (char *str)
  147          {
  148   1          uint32 temp = 0;                                                            // ÁÙÊ±¼ÆËã±äÁ¿
  149   1      
  150   1          do
  151   1          {
  152   2              if(NULL == str)
  153   2              {
  154   3                  break;
  155   3              }
  156   2      
  157   2              while(('0' <= *str) && ('9' >= *str))                                  // È·¶¨ÕâÊÇ¸öÊý×Ö
  158   2              {
  159   3                  temp = temp * 10 + ((uint8)(*str) - 0x30);                         // ¼ÆËãÊýÖµ
  160   3                  str ++;
  161   3              }
  162   2          }while(0);
  163   1      
  164   1          return temp;
  165   1      }
  166          
  167          //-------------------------------------------------------------------------------------------------------
             -------------
  168          // º¯Êý¼ò½é     ÕûÐÎÊý×Ö×ª×Ö·û´® Êý¾Ý·¶Î§ÊÇ [0,65535]
  169          // ²ÎÊýËµÃ÷     *str            ×Ö·û´®Ö¸Õë
  170          // ²ÎÊýËµÃ÷     number          ´«ÈëµÄÊý¾Ý
  171          // ·µ»Ø²ÎÊý     void
  172          // Ê¹ÓÃÊ¾Àý     func_uint_to_str(data_buffer, 300);
  173          // ±¸×¢ÐÅÏ¢     
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 4   

  174          //-------------------------------------------------------------------------------------------------------
             -------------
  175          void func_uint_to_str (char *str, uint32 number)
  176          {
  177   1      
  178   1          int8 data_temp[16];                                                         // »º³åÇø
  179   1          uint8 dat_bit = 0;                                                              // Êý×ÖÎ»Êý
  180   1      
  181   1          do
  182   1          {
  183   2              if(NULL == str)
  184   2              {
  185   3                  break;
  186   3              }
  187   2      
  188   2              if(0 == number)                                                         // ÕâÊÇ¸ö 0
  189   2              {
  190   3                  *str = '0';
  191   3                  break;
  192   3              }
  193   2      
  194   2              while(0 != number)                                                      // Ñ­»·Ö±µ½ÊýÖµ¹éÁã
  195   2              {
  196   3                  data_temp[dat_bit ++] = (number % 10);                                  // µ¹Ðò½«ÊýÖµÌáÈ¡³öÀ´
  197   3                  number /= 10;                                                       // Ï÷¼õ±»ÌáÈ¡µÄ¸öÎ»Êý
  198   3              }
  199   2              while(0 != dat_bit)                                                         // ÌáÈ¡µÄÊý×Ö¸öÊýµÝ¼õ
             -´¦Àí
  200   2              {
  201   3                  *str ++ = (data_temp[dat_bit - 1] + 0x30);                              // ½«Êý×Ö´Óµ¹ÐòÊý×éÖÐ
             -µ¹ÐòÈ¡³ö ±ä³ÉÕýÐò·ÅÈë×Ö·û´®
  202   3                  dat_bit --;
  203   3              }
  204   2          }while(0);
  205   1      }
  206          
  207          //-------------------------------------------------------------------------------------------------------
             -------------
  208          // º¯Êý¼ò½é     ×Ö·û´®×ª¸¡µãÊý ÓÐÐ§ÀÛ¼Æ¾«¶ÈÎªÐ¡ÊýµãºóÁùÎ»
  209          // ²ÎÊýËµÃ÷     *str            ´«Èë×Ö·û´® ¿É´ø·ûºÅ
  210          // ·µ»Ø²ÎÊý     float           ×ª»»ºóµÄÊý¾Ý          
  211          // Ê¹ÓÃÊ¾Àý     float dat = func_str_to_float("-100.2");
  212          // ±¸×¢ÐÅÏ¢     
  213          //-------------------------------------------------------------------------------------------------------
             -------------
  214          float func_str_to_float (char *str)
  215          {
  216   1          uint8 sign = 0;                                                             // ±ê¼Ç·ûºÅ 0-ÕýÊý 1-¸ºÊý
  217   1          float temp = 0.0;                                                           // ÁÙÊ±¼ÆËã±äÁ¿ ÕûÊý²¿·Ö
  218   1          float temp_point = 0.0;                                                     // ÁÙÊ±¼ÆËã±äÁ¿ Ð¡Êý²¿·Ö
  219   1          float point_bit = 1;                                                        // Ð¡ÊýÀÛ¼Æ³ýÊý
  220   1      
  221   1          do
  222   1          {
  223   2              if(NULL == str)
  224   2              {
  225   3                  break;
  226   3              }
  227   2      
  228   2              if('-' == *str)                                                         // ¸ºÊý
  229   2              {
  230   3                  sign = 1;                                                           // ±ê¼Ç¸ºÊý
  231   3                  str ++;
  232   3              }
  233   2              else if('+' == *str)                                                    // Èç¹ûµÚÒ»¸ö×Ö·ûÊÇÕýºÅ
  234   2              {
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 5   

  235   3                  str ++;
  236   3              }
  237   2      
  238   2              // ÌáÈ¡ÕûÊý²¿·Ö
  239   2              while(('0' <= *str) && ('9' >= *str))                                   // È·¶¨ÕâÊÇ¸öÊý×Ö
  240   2              {
  241   3                  temp = temp * 10 + ((uint8)(*str) - 0x30);                          // ½«ÊýÖµÌáÈ¡³öÀ´
  242   3                  str ++;
  243   3              }
  244   2              if('.' == *str)
  245   2              {
  246   3                  str ++;
  247   3                  while(('0' <= *str) && ('9' >= *str) && point_bit < 1000000.0)      // È·ÈÏÕâÊÇ¸öÊý×Ö ²¢ÇÒ¾«¶
             -È¿ØÖÆ»¹Ã»µ½ÁùÎ»
  248   3                  {
  249   4                      temp_point = temp_point * 10 + ((uint8)(*str) - 0x30);          // ÌáÈ¡Ð¡Êý²¿·ÖÊýÖµ
  250   4                      point_bit *= 10;                                                // ¼ÆËãÕâ²¿·ÖÐ¡ÊýµÄ³ýÊý
  251   4                      str ++;
  252   4                  }
  253   3                  temp_point /= point_bit;                                            // ¼ÆËãÐ¡Êý
  254   3              }
  255   2              temp += temp_point;                                                     // ½«ÊýÖµÆ´ºÏ
  256   2      
  257   2              if(sign)
  258   2              {
  259   3                  temp = -temp;
  260   3              }
  261   2          }while(0);
  262   1          return temp;
  263   1      }
  264          
  265          //-------------------------------------------------------------------------------------------------------
             -------------
  266          // º¯Êý¼ò½é     ¸¡µãÊý×Ö×ª×Ö·û´®
  267          // ²ÎÊýËµÃ÷     *str            ×Ö·û´®Ö¸Õë
  268          // ²ÎÊýËµÃ÷     number          ´«ÈëµÄÊý¾Ý
  269          // ²ÎÊýËµÃ÷     point_bit       Ð¡Êýµã¾«¶È
  270          // ·µ»Ø²ÎÊý     void
  271          // Ê¹ÓÃÊ¾Àý     func_float_to_str(data_buffer, 3.1415, 2);                      // ½á¹ûÊä³ö data_buffer =
             - "3.14"
  272          // ±¸×¢ÐÅÏ¢     
  273          //-------------------------------------------------------------------------------------------------------
             -------------
  274          void func_float_to_str (char *str, float number, uint8 point_bit)
  275          {
  276   1      
  277   1          int data_int = 0;                                                           // ÕûÊý²¿·Ö
  278   1          int data_float = 0.0;                                                       // Ð¡Êý²¿·Ö
  279   1          int data_temp[8];                                                           // ÕûÊý×Ö·û»º³å
  280   1          int data_temp_point[6];                                                     // Ð¡Êý×Ö·û»º³å
  281   1          uint8 dat_bit = point_bit;                                                      // ×ª»»¾«¶ÈÎ»Êý
  282   1      
  283   1          do
  284   1          {
  285   2              if(NULL == str)
  286   2              {
  287   3                  break;
  288   3              }
  289   2      
  290   2              // ÌáÈ¡ÕûÊý²¿·Ö
  291   2              data_int = (int)number;                                                 // Ö±½ÓÇ¿ÖÆ×ª»»Îª int
  292   2              if(0 > number)                                                          // ÅÐ¶ÏÔ´Êý¾ÝÊÇÕýÊý»¹ÊÇ¸º
             -Êý
  293   2              {
  294   3                  *str ++ = '-';
  295   3              }
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 6   

  296   2              else if(0.0 == number)                                                  // Èç¹ûÊÇ¸ö 0
  297   2              {
  298   3                  *str ++ = '0';
  299   3                  *str ++ = '.';
  300   3                  *str = '0';
  301   3                  break;
  302   3              }
  303   2      
  304   2              // ÌáÈ¡Ð¡Êý²¿·Ö
  305   2              number = number - data_int;                                             // ¼õÈ¥ÕûÊý²¿·Ö¼´¿É
  306   2              while(dat_bit --)
  307   2              {
  308   3                  number = number * 10;                                               // ½«ÐèÒªµÄÐ¡ÊýÎ»ÊýÌáÈ¡µ½
             -ÕûÊý²¿·Ö
  309   3              }
  310   2              data_float = (int)number;                                               // »ñÈ¡Õâ²¿·ÖÊýÖµ
  311   2      
  312   2              // ÕûÊý²¿·Ö×ªÎª×Ö·û´®
  313   2              dat_bit = 0;
  314   2              do
  315   2              {
  316   3                  data_temp[dat_bit ++] = data_int % 10;                                  // ½«ÕûÊý²¿·Öµ¹ÐòÐ´Èë
             -×Ö·û»º³åÇø
  317   3                  data_int /= 10;
  318   3              }while(0 != data_int);
  319   2              while(0 != dat_bit)
  320   2              {
  321   3                  *str ++ = (func_abs(data_temp[dat_bit - 1]) + 0x30);                    // ÔÙµ¹Ðò½«µ¹ÐòµÄÊýÖµ
             -Ð´Èë×Ö·û´® µÃµ½ÕýÐòÊýÖµ
  322   3                  dat_bit --;
  323   3              }
  324   2      
  325   2              // Ð¡Êý²¿·Ö×ªÎª×Ö·û´®
  326   2              if(point_bit != 0)
  327   2              {
  328   3                  dat_bit = 0;
  329   3                  *str ++ = '.';
  330   3                  if(0 == data_float)
  331   3                  {
  332   4                      *str = '0';
  333   4                  }
  334   3                  else
  335   3                  {
  336   4                      while(0 != point_bit)                                           // ÅÐ¶ÏÓÐÐ§Î»Êý
  337   4                      {
  338   5                          data_temp_point[dat_bit ++] = data_float % 10;                  // µ¹ÐòÐ´Èë×Ö·û»º³åÇø
  339   5                          data_float /= 10;
  340   5                          point_bit --;                                                
  341   5                      }
  342   4                      while(0 != dat_bit)
  343   4                      {
  344   5                          *str ++ = (func_abs(data_temp_point[dat_bit - 1]) + 0x30);      // ÔÙµ¹Ðò½«µ¹ÐòµÄÊýÖµ
             -Ð´Èë×Ö·û´® µÃµ½ÕýÐòÊýÖµ
  345   5                          dat_bit --;
  346   5                      }
  347   4                  }
  348   3              }
  349   2          }while(0);
  350   1      }
  351          
  352          //-------------------------------------------------------------------------------------------------------
             -------------
  353          // º¯Êý¼ò½é     ×Ö·û´®×ª¸¡µãÊý ÓÐÐ§ÀÛ¼Æ¾«¶ÈÎªÐ¡Êýµãºó¾ÅÎ»
  354          // ²ÎÊýËµÃ÷     str             ´«Èë×Ö·û´® ¿É´ø·ûºÅ
  355          // ·µ»Ø²ÎÊý     double          ×ª»»ºóµÄÊý¾Ý          
  356          // Ê¹ÓÃÊ¾Àý     double dat = func_str_to_double("-100.2");
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 7   

  357          // ±¸×¢ÐÅÏ¢     
  358          //-------------------------------------------------------------------------------------------------------
             -------------
  359          double func_str_to_double (char *str)
  360          {
  361   1      
  362   1          uint8 sign = 0;                                                             // ±ê¼Ç·ûºÅ 0-ÕýÊý 1-¸ºÊý
  363   1          double temp = 0.0;                                                          // ÁÙÊ±¼ÆËã±äÁ¿ ÕûÊý²¿·Ö
  364   1          double temp_point = 0.0;                                                    // ÁÙÊ±¼ÆËã±äÁ¿ Ð¡Êý²¿·Ö
  365   1          double point_bit = 1;                                                       // Ð¡ÊýÀÛ¼Æ³ýÊý
  366   1      
  367   1          do
  368   1          {
  369   2              if(NULL == str)
  370   2              {
  371   3                  break;
  372   3              }
  373   2      
  374   2              if('-' == *str)                                                         // ¸ºÊý
  375   2              {
  376   3                  sign = 1;                                                           // ±ê¼Ç¸ºÊý
  377   3                  str ++;
  378   3              }
  379   2              else if('+' == *str)                                                    // Èç¹ûµÚÒ»¸ö×Ö·ûÊÇÕýºÅ
  380   2              {
  381   3                  str ++;
  382   3              }
  383   2      
  384   2              // ÌáÈ¡ÕûÊý²¿·Ö
  385   2              while(('0' <= *str) && ('9' >= *str))                                   // È·¶¨ÕâÊÇ¸öÊý×Ö
  386   2              {
  387   3                  temp = temp * 10 + ((uint8)(*str) - 0x30);                          // ½«ÊýÖµÌáÈ¡³öÀ´
  388   3                  str ++;
  389   3              }
  390   2              if('.' == *str)
  391   2              {
  392   3                  str ++;
  393   3                  while(('0' <= *str) && ('9' >= *str) && point_bit < 1000000000.0)   // È·ÈÏÕâÊÇ¸öÊý×Ö ²¢ÇÒ¾«¶
             -È¿ØÖÆ»¹Ã»µ½¾ÅÎ»
  394   3                  {
  395   4                      temp_point = temp_point * 10 + ((uint8)(*str) - 0x30);          // ÌáÈ¡Ð¡Êý²¿·ÖÊýÖµ
  396   4                      point_bit *= 10;                                                // ¼ÆËãÕâ²¿·ÖÐ¡ÊýµÄ³ýÊý
  397   4                      str ++;
  398   4                  }
  399   3                  temp_point /= point_bit;                                            // ¼ÆËãÐ¡Êý
  400   3              }
  401   2              temp += temp_point;                                                     // ½«ÊýÖµÆ´ºÏ
  402   2      
  403   2              if(sign)
  404   2              {
  405   3                  temp = -temp;
  406   3              }
  407   2          }while(0);
  408   1          return temp;
  409   1      
  410   1      }
  411          
  412          //-------------------------------------------------------------------------------------------------------
             -------------
  413          // º¯Êý¼ò½é     ¸¡µãÊý×Ö×ª×Ö·û´®
  414          // ²ÎÊýËµÃ÷     *str            ×Ö·û´®Ö¸Õë
  415          // ²ÎÊýËµÃ÷     number          ´«ÈëµÄÊý¾Ý
  416          // ²ÎÊýËµÃ÷     point_bit       Ð¡Êýµã¾«¶È
  417          // ·µ»Ø²ÎÊý     void
  418          // Ê¹ÓÃÊ¾Àý     func_double_to_str(data_buffer, 3.1415, 2);                     // ½á¹ûÊä³ö data_buffer =
             - "3.14"
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 8   

  419          // ±¸×¢ÐÅÏ¢     
  420          //-------------------------------------------------------------------------------------------------------
             -------------
  421          void func_double_to_str (char *str, double number, uint8 point_bit)
  422          {
  423   1      
  424   1          int data_int = 0;                                                           // ÕûÊý²¿·Ö
  425   1          int data_float = 0.0;                                                       // Ð¡Êý²¿·Ö
  426   1          int data_temp[12];                                                          // ÕûÊý×Ö·û»º³å
  427   1          int data_temp_point[9];                                                     // Ð¡Êý×Ö·û»º³å
  428   1          uint8 dat_bit = point_bit;                                                      // ×ª»»¾«¶ÈÎ»Êý
  429   1      
  430   1          do
  431   1          {
  432   2              if(NULL == str)
  433   2              {
  434   3                  break;
  435   3              }
  436   2      
  437   2              // ÌáÈ¡ÕûÊý²¿·Ö
  438   2              data_int = (int)number;                                                 // Ö±½ÓÇ¿ÖÆ×ª»»Îª int
  439   2              if(0 > number)                                                          // ÅÐ¶ÏÔ´Êý¾ÝÊÇÕýÊý»¹ÊÇ¸º
             -Êý
  440   2              {
  441   3                  *str ++ = '-';
  442   3              }
  443   2              else if(0.0 == number)                                                  // Èç¹ûÊÇ¸ö 0
  444   2              {
  445   3                  *str ++ = '0';
  446   3                  *str ++ = '.';
  447   3                  *str = '0';
  448   3                  break;
  449   3              }
  450   2      
  451   2              // ÌáÈ¡Ð¡Êý²¿·Ö
  452   2              number = number - data_int;                                             // ¼õÈ¥ÕûÊý²¿·Ö¼´¿É
  453   2              while(dat_bit --)
  454   2              {
  455   3                  number = number * 10;                                               // ½«ÐèÒªµÄÐ¡ÊýÎ»ÊýÌáÈ¡µ½
             -ÕûÊý²¿·Ö
  456   3              }
  457   2              data_float = (int)number;                                               // »ñÈ¡Õâ²¿·ÖÊýÖµ
  458   2      
  459   2              // ÕûÊý²¿·Ö×ªÎª×Ö·û´®
  460   2              dat_bit = 0;
  461   2              do
  462   2              {
  463   3                  data_temp[dat_bit ++] = data_int % 10;                                  // ½«ÕûÊý²¿·Öµ¹ÐòÐ´Èë
             -×Ö·û»º³åÇø
  464   3                  data_int /= 10;
  465   3              }while(0 != data_int);
  466   2              while(0 != dat_bit )
  467   2              {
  468   3                  *str ++ = (func_abs(data_temp[dat_bit - 1]) + 0x30);                    // ÔÙµ¹Ðò½«µ¹ÐòµÄÊýÖµ
             -Ð´Èë×Ö·û´® µÃµ½ÕýÐòÊýÖµ
  469   3                  dat_bit --;
  470   3              }
  471   2      
  472   2              // Ð¡Êý²¿·Ö×ªÎª×Ö·û´®
  473   2              if(point_bit != 0)
  474   2              {
  475   3                  dat_bit = 0;
  476   3                  *str ++ = '.';
  477   3                  if(0 == data_float)
  478   3                      *str = '0';
  479   3                  else
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 9   

  480   3                  {
  481   4                      while(0 != point_bit)                                           // ÅÐ¶ÏÓÐÐ§Î»Êý
  482   4                      {
  483   5                          data_temp_point[dat_bit ++] = data_float % 10;                  // µ¹ÐòÐ´Èë×Ö·û»º³åÇø
  484   5                          data_float /= 10;
  485   5                          point_bit --;                                                
  486   5                      }
  487   4                      while(0 != dat_bit )
  488   4                      {
  489   5                          *str ++ = (func_abs(data_temp_point[dat_bit - 1]) + 0x30);      // ÔÙµ¹Ðò½«µ¹ÐòµÄÊýÖµ
             -Ð´Èë×Ö·û´® µÃµ½ÕýÐòÊýÖµ
  490   5                          dat_bit --;
  491   5                      }
  492   4                  }
  493   3              }
  494   2          }while(0);
  495   1      }
  496          
  497          //-------------------------------------------------------------------------------------------------------
             -------------
  498          // º¯Êý¼ò½é     ×Ö·û´®×ª Hex
  499          // ²ÎÊýËµÃ÷     str             ´«Èë×Ö·û´® ÎÞ·ûºÅ
  500          // ·µ»Ø²ÎÊý     uint32          ×ª»»ºóµÄÊý¾Ý
  501          // Ê¹ÓÃÊ¾Àý     uint32 dat = func_str_to_hex("0x11");
  502          // ±¸×¢ÐÅÏ¢     
  503          //-------------------------------------------------------------------------------------------------------
             -------------
  504          uint32 func_str_to_hex (char *str)
  505          {
  506   1      
  507   1          uint32 str_len = strlen(str);                                               // ×Ö·û´®³¤
  508   1          uint32 result_data = 0;                                                     // ½á¹û»º´æ
  509   1          uint8 temp = 0;                                                             // ¼ÆËã±äÁ¿
  510   1          uint8 flag = 0;                                                             // ±êÖ¾Î»
  511   1      
  512   1          do
  513   1          {
  514   2              if(NULL == str)
  515   2              {
  516   3                  break;
  517   3              }
  518   2      
  519   2              if(flag)
  520   2              {
  521   3                  if(('a' <= *str) && ('f' >= *str))
  522   3                  {
  523   4                      temp = (*str - 87);
  524   4                  }
  525   3                  else if(('A' <= *str) && ('F' >= *str))
  526   3                  {
  527   4                      temp = (*str - 55);
  528   4                  }
  529   3                  else if(('0' <= *str) && ('9' >= *str))
  530   3                  {
  531   4                      temp = (*str - 48);
  532   4                  }
  533   3                  else
  534   3                  {
  535   4                      break;
  536   4                  }
  537   3                  result_data = ((result_data << 4) | (temp & 0x0F));
  538   3              }
  539   2              else
  540   2              {
  541   3      //            if(strncmp("0x", str, 2))
  542   3                  if((*str == '0') && (*(str + 1) == 'x'))
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 10  

  543   3                  {
  544   4                      str ++;
  545   4                      flag = 1;
  546   4                  }
  547   3              }
  548   2              str ++;
  549   2          }while(str_len --);
  550   1      
  551   1          return result_data;
  552   1      }
  553          
  554          //-------------------------------------------------------------------------------------------------------
             -------------
  555          // º¯Êý¼ò½é     Hex ×ª×Ö·û´®
  556          // ²ÎÊýËµÃ÷     *str            ×Ö·û´®Ö¸Õë
  557          // ²ÎÊýËµÃ÷     number          ´«ÈëµÄÊý¾Ý
  558          // ·µ»Ø²ÎÊý     void
  559          // Ê¹ÓÃÊ¾Àý     func_hex_to_str(data_buffer, 0x11);                             // ½á¹ûÊä³ö data_buffer =
             - "0x11"
  560          // ±¸×¢ÐÅÏ¢     
  561          //-------------------------------------------------------------------------------------------------------
             -------------
  562          void func_hex_to_str (char *str, uint32 number)
  563          {
  564   1      
  565   1          const char hex_index[16] = {
  566   1              '0', '1', '2', '3',
  567   1              '4', '5', '6', '7',
  568   1              '8', '9', 'A', 'B',
  569   1              'C', 'D', 'E', 'F'};
  570   1          int8 data_temp[12];                                                         // »º³åÇø
  571   1          uint8 dat_bit = 0;                                                              // Êý×ÖÎ»Êý
  572   1      
  573   1          *str++ = '0';
  574   1          *str++ = 'x';
  575   1          do
  576   1          {
  577   2              if(NULL == str)
  578   2              {
  579   3                  break;
  580   3              }
  581   2      
  582   2              if(0 == number)                                                         // ÕâÊÇ¸ö 0
  583   2              {
  584   3                  *str = '0';
  585   3                  break;
  586   3              }
  587   2      
  588   2              while(0 != number)                                                      // Ñ­»·Ö±µ½ÊýÖµ¹éÁã
  589   2              {
  590   3                  data_temp[dat_bit ++] = (number & 0xF);                                 // µ¹Ðò½«ÊýÖµÌáÈ¡³öÀ´
  591   3                  number >>= 4;                                                       // Ï÷¼õ±»ÌáÈ¡µÄ¸öÎ»Êý
  592   3              }
  593   2              while(0 != dat_bit)                                                         // ÌáÈ¡µÄÊý×Ö¸öÊýµÝ¼õ
             -´¦Àí
  594   2              {
  595   3                  *str ++ = hex_index[data_temp[dat_bit - 1]];                            // ½«Êý×Ö´Óµ¹ÐòÊý×éÖÐ
             -µ¹ÐòÈ¡³ö ±ä³ÉÕýÐò·ÅÈë×Ö·û´®
  596   3                  dat_bit --;
  597   3              }
  598   2          }while(0);
  599   1      }
  600          
  601          //-------------------------------------------------------------------------------------------------------
             -------------
  602          // º¯Êý¼ò½é     Êý×Ö×ª»»Îª ASCII Öµ
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 11  

  603          // ²ÎÊýËµÃ÷     dat             ´«ÈëµÄÊý¾Ý
  604          // ²ÎÊýËµÃ÷     *p              Êý¾Ý»º³å
  605          // ²ÎÊýËµÃ÷     neg_type        Êý¾ÝÀàÐÍ
  606          // ²ÎÊýËµÃ÷     radix           ½øÖÆ
  607          // ·µ»Ø²ÎÊý     uint8           Êý¾Ý
  608          // Ê¹ÓÃÊ¾Àý     number_conversion_ascii((uint32)ival, vstr, 1, 10);
  609          // ±¸×¢ÐÅÏ¢     ±¾º¯ÊýÔÚÎÄ¼þÄÚ²¿µ÷ÓÃ ÓÃ»§²»ÓÃ¹Ø×¢ Ò²²»¿ÉÐÞ¸Ä
  610          //-------------------------------------------------------------------------------------------------------
             -------------
  611          static uint8 number_conversion_ascii (uint32 dat, int8 *p, uint8 neg_type, uint8 radix)
  612          {
  613   1          int32   neg_dat;
  614   1          uint32  pos_dat;
  615   1          uint8   temp_data = 0;
  616   1          uint8   valid_num = 0;
  617   1      
  618   1          if(neg_type)
  619   1          {
  620   2              neg_dat = (int32)dat;
  621   2              if(0 > neg_dat)
  622   2              {
  623   3                  neg_dat = -neg_dat;
  624   3              }
  625   2              while(1)
  626   2              {
  627   3                  *p = neg_dat%radix + '0';
  628   3                  neg_dat = neg_dat/radix;
  629   3                  valid_num ++;
  630   3      
  631   3                  if(!neg_dat)
  632   3                  {
  633   4                      break;
  634   4                  }
  635   3                  p ++;
  636   3              }
  637   2          }
  638   1          else
  639   1          {
  640   2              pos_dat = dat;
  641   2              while(1)
  642   2              {
  643   3                  temp_data = pos_dat%radix;
  644   3                  if(10 <= temp_data)
  645   3                  {
  646   4                      temp_data += 'A'-10;
  647   4                  }
  648   3                  else
  649   3                  {
  650   4                      temp_data += '0';
  651   4                  }
  652   3      
  653   3                  *p = temp_data;
  654   3      
  655   3                  pos_dat = pos_dat/radix;
  656   3                  valid_num ++;
  657   3      
  658   3                  if(!pos_dat)
  659   3                  {
  660   4                      break;
  661   4                  }
  662   3                  p ++;
  663   3              }
  664   2          }
  665   1          return valid_num;
  666   1      }
  667          
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 12  

  668          //-------------------------------------------------------------------------------------------------------
             -------------
  669          // º¯Êý¼ò½é     printf ÏÔÊ¾×ª»»
  670          // ²ÎÊýËµÃ÷     *d_buff         »º³åÇø
  671          // ²ÎÊýËµÃ÷     len             ³¤¶È
  672          // ·µ»Ø²ÎÊý     void
  673          // Ê¹ÓÃÊ¾Àý     printf_reverse_order(vstr, vlen);
  674          // ±¸×¢ÐÅÏ¢     ±¾º¯ÊýÔÚÎÄ¼þÄÚ²¿µ÷ÓÃ ÓÃ»§²»ÓÃ¹Ø×¢ Ò²²»¿ÉÐÞ¸Ä
  675          //-------------------------------------------------------------------------------------------------------
             -------------
  676          static void printf_reverse_order (int8 *d_buff, uint32 len)
  677          {
  678   1          uint32 i;
  679   1          int8  temp_data;
  680   1          for(i = 0; len / 2 > i; i ++)
  681   1          {
  682   2              temp_data = d_buff[len - 1 - i];
  683   2              d_buff[len - 1 -i ] = d_buff[i];
  684   2              d_buff[i] = temp_data; 
  685   2          }
  686   1      }
  687          
  688          //-------------------------------------------------------------------------------------------------------
             -------------
  689          // º¯Êý¼ò½é     sfprint º¯ÊýÊµÏÖ
  690          // ²ÎÊýËµÃ÷     *buff           »º³åÇø
  691          // ²ÎÊýËµÃ÷     *format         Ô´×Ö·û´®
  692          // ²ÎÊýËµÃ÷     ...             ¿É±ä²ÎÊýÁÐ±í
  693          // ·µ»Ø²ÎÊý     uint32          ´¦ÀíºóÊý¾Ý³¤
  694          // Ê¹ÓÃÊ¾Àý     sfprint(buff, "Data : %d", 100);
  695          // ±¸×¢ÐÅÏ¢     ±¾º¯ÊýÔÚÎÄ¼þÄÚ²¿µ÷ÓÃ ÓÃ»§²»ÓÃ¹Ø×¢ Ò²²»¿ÉÐÞ¸Ä
  696          //-------------------------------------------------------------------------------------------------------
             -------------
  697          uint32 sfprint(char  *buff, const int8 *format, ...)
  698          {
  699   1          uint32 buff_len=0;
  700   1          va_list arg;
  701   1        va_start(arg, format);
  702   1       
  703   1        while (*format)
  704   1        {
  705   2          int8 ret = *format;
  706   2          if (ret == '%')
  707   2          {
  708   3            switch (*++format)
  709   3            {
  710   4                      case 'a':// Ê®Áù½øÖÆp¼ÆÊý·¨Êä³ö¸¡µãÊý ÔÝÎ´ÊµÏÖ
  711   4                      {
  712   5                          
  713   5                          
  714   5                      }break;
  715   4                      
  716   4                      
  717   4                      case 'c':// Ò»¸ö×Ö·û
  718   4                      {
  719   5                          int8 ch = (int8)va_arg(arg, uint32);
  720   5                          *buff = ch;
  721   5                          buff++;
  722   5                          buff_len++;
  723   5                                  
  724   5                      }break;
  725   4                      
  726   4                      
  727   4                      case 'd':
  728   4                      case 'i':// ÓÐ·ûºÅÊ®½øÖÆÕûÊý
  729   4                      {
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 13  

  730   5                          int8 vstr[33];
  731   5                          int32 ival = (int32)va_arg(arg, int32);
  732   5                          uint8 vlen = number_conversion_ascii((uint32)ival, vstr, 1, 10);
  733   5                          
  734   5                          if(ival<0)  
  735   5                          {
  736   6                              vstr[vlen] = '-';
  737   6                              vlen++;
  738   6                          }
  739   5                          printf_reverse_order(vstr,vlen);
  740   5                          memcpy(buff,vstr,vlen);
  741   5                          buff += vlen;
  742   5                          buff_len += vlen;
  743   5                          
  744   5                          
  745   5                      }break;
  746   4                      
  747   4                      case 'f':// ¸¡µãÊý£¬Êä³öÐ¡ÊýµãºóÁùÎ»  ²»ÄÜÖ¸¶¨Êä³ö¾«¶È
  748   4                      case 'F':// ¸¡µãÊý£¬Êä³öÐ¡ÊýµãºóÁùÎ»  ²»ÄÜÖ¸¶¨Êä³ö¾«¶È
  749   4                      {
  750   5                          int8 vstr[33];
  751   5                          double ival = (double)va_arg(arg, double);
  752   5                          uint8 vlen = number_conversion_ascii((uint32)(int32)ival, vstr, 1, 10);
  753   5                          
  754   5                          if(ival<0)  
  755   5                          {
  756   6                              vstr[vlen] = '-';
  757   6                              vlen++;
  758   6                          }
  759   5                          printf_reverse_order(vstr,vlen);
  760   5                          memcpy(buff,vstr,vlen);
  761   5                          buff += vlen;
  762   5                          buff_len += vlen;
  763   5      
  764   5                          ival = ((double)ival - (int32)ival)*1000000;
  765   5                          if(ival)
  766   5                          {
  767   6                              vlen = number_conversion_ascii((uint32)(int32)ival, vstr, 1, 10);
  768   6                          }
  769   5                          else
  770   5                          {
  771   6                              vstr[0] = vstr[1] = vstr[2] = vstr[3] = vstr[4] = vstr[5] = '0';
  772   6                              vlen = 6;
  773   6                          }
  774   5                
  775   5                          while(6>vlen)
  776   5                          {
  777   6                              vstr[vlen] = '0';
  778   6                              vlen++;
  779   6                          }
  780   5                
  781   5                          vstr[vlen] = '.';
  782   5                          vlen++;
  783   5                          
  784   5                          printf_reverse_order(vstr,vlen);
  785   5                          memcpy(buff,vstr,vlen);
  786   5                buff += vlen;
  787   5                          buff_len += vlen;
  788   5      
  789   5                          break;
  790   5                      }
  791   4                      
  792   4                      case 'u':// ÎÞ·ûºÅÊ®½øÖÆÕûÊý
  793   4                      {
  794   5                          int8 vstr[33];
  795   5                          uint32 ival = (uint32)va_arg(arg, uint32);
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 14  

  796   5                          uint8 vlen = number_conversion_ascii(ival, vstr, 0, 10);
  797   5                          
  798   5                          printf_reverse_order(vstr,vlen);
  799   5                          memcpy(buff,vstr,vlen);
  800   5                          buff += vlen;
  801   5                          buff_len += vlen;
  802   5                      }break;
  803   4                      
  804   4                      case 'o':// ÎÞ·ûºÅ°Ë½øÖÆÕûÊý 
  805   4                      {
  806   5                          int8 vstr[33];
  807   5                          uint32 ival = (uint32)va_arg(arg, uint32);
  808   5                          uint8 vlen = number_conversion_ascii(ival, vstr, 0, 8);
  809   5                          
  810   5                          printf_reverse_order(vstr,vlen);
  811   5                          memcpy(buff,vstr,vlen);
  812   5                          buff += vlen;
  813   5                          buff_len += vlen;
  814   5                          
  815   5                      }break;
  816   4                      
  817   4                      case 'x':// ÎÞ·ûºÅÊ®Áù½øÖÆÕûÊý
  818   4                      case 'X':// ÎÞ·ûºÅÊ®Áù½øÖÆÕûÊý
  819   4                      {
  820   5                          int8 vstr[33];
  821   5                          uint32 ival = (uint32)va_arg(arg, uint32);
  822   5                          uint8 vlen = number_conversion_ascii(ival, vstr, 0, 16);
  823   5                          
  824   5                          printf_reverse_order(vstr,vlen);
  825   5                          memcpy(buff,vstr,vlen);
  826   5                          buff += vlen;
  827   5                          buff_len += vlen;
  828   5                      }break;
  829   4                      
  830   4                      
  831   4                      case 's':// ×Ö·û´®
  832   4                      {
  833   5                          int8 *pc = va_arg(arg, int8 *);
  834   5                          while (*pc)
  835   5                          {
  836   6                              *buff = *pc;
  837   6                              buff++;
  838   6                              buff_len++;
  839   6                              pc++;
  840   6                          }
  841   5                      }break;
  842   4                      
  843   4                      case 'p':// ÒÔ16½øÖÆÐÎÊ½Êä³öÖ¸Õë
  844   4                      {
  845   5                          int8 vstr[33];
  846   5                          uint32 ival = (uint32)va_arg(arg, uint32);
  847   5                          //uint8 vlen = number_conversion_ascii(ival, vstr, 0, 16);
  848   5                number_conversion_ascii(ival, vstr, 0, 16);
  849   5                          
  850   5                          printf_reverse_order(vstr,8);
  851   5                          memcpy(buff,vstr,8);
  852   5                          buff += 8;
  853   5                          buff_len += 8;
  854   5                                  
  855   5                      }break;
  856   4                      
  857   4                      
  858   4                      case '%':// Êä³ö×Ö·û% 
  859   4                      {
  860   5                          *buff = '%';
  861   5                          buff++;
C251 COMPILER V5.60.0,  FUNCTION                                                           25/04/24  13:33:30  PAGE 15  

  862   5                          buff_len++;
  863   5                      }break;
  864   4      
  865   4                      default:break;
  866   4            }
  867   3          }
  868   2          else
  869   2          {
  870   3                  *buff = (int8)(*format);
  871   3                  buff++;
  872   3                  buff_len++;
  873   3          }
  874   2          format++;
  875   2        }
  876   1        va_end(arg);
  877   1      
  878   1          return buff_len;
  879   1      }
  880          
  881          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3210     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------        230
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        16     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
