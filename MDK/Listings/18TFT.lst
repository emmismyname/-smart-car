C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE 18TFT
OBJECT MODULE PLACED IN .\Out_flie\18TFT.obj
COMPILER INVOKED BY: D:\Keil_80251\C251\BIN\C251.EXE ..\LIB\peripheral\18TFT.c XSMALL INTR2 BROWSE INCDIR(..\LIB\startup
                    -;..\LIB\libraries;..\LIB\peripheral;..\USER\inc) DEBUG PRINT(.\Listings\18TFT.lst) TABS(2) OBJECT(.\Out_flie\18TFT.obj) 

stmt  level    source

    1          
    2          /********************************************************************************************************
             -*************
    3           * @file          1.8寸TFT显示屏
    4           * @date          2024-03-06
    5           * @note    
    6                    接线定义：
    7                    ------------------------------------ 
    8                    模块管脚            单片机管脚
    9                    SCL                 查看18FTF.h文件中的 TFT_SCL  宏定义的引脚     硬件SPI引脚不可随意切换
   10                    SDA                 查看18FTF.h文件中的 TFT_SDA  宏定义的引脚     硬件SPI引脚不可随意切换
   11                    RES                 查看18FTF.h文件中的 REST_PIN 宏定义的引脚    
   12                    DC                  查看18FTF.h文件中的 DC_PIN   宏定义的引脚  
   13                    CS                  查看18FTF.h文件中的 TFT_CS   宏定义的引脚      硬件SPI引脚不可随意切换
   14                    
   15                    电源引脚
   16                    BL  3.3V电源（背光控制引脚，也可以接PWM来控制亮度）
   17                    VCC 3.3V电源
   18                    GND 电源地
   19                    最大分辨率128*160
   20                    ------------------------------------ 
   21          
   22           ********************************************************************************************************
             -************/
   23          
   24          
   25          #include "18TFT.h"
   26          #include "FONT.h"
   27          #include "FUNCTION.h"
   28          #include "spi.h"
   29          #include "delay.h"
   30          
   31          //-------------------------------------------------------------------------------------------------------
             -------------
   32          //  以下函数是使用软件SPI通信，相比较硬件SPI，软件SPI引脚更加灵活，可以使用任意普通IO
   33          //-------------------------------------------------------------------------------------------------------
             -------------
   34          
   35          
   36          //-------------------------------------------------------------------------------------------------------
             -------------
   37          //  @brief      软件SPI写命令
   38          //  @param      void        
   39          //  @return     void        
   40          //  Sample usage:    lcd_writeIndex_simspi(0x2a);          
   41          //-------------------------------------------------------------------------------------------------------
             -------------
   42          void lcd_writeIndex_simspi(uint8 dat)     
   43          { 
   44   1        uint8 i=8;
   45   1        
   46   1        TFT_CS_SIMSPI(0);
   47   1        TFT_DC_SIMSPI(0);
   48   1        TFT_SCL_SIMSPI(0);
   49   1        
   50   1        while(i--)
   51   1        {
   52   2          if(dat&0x80){TFT_SDA_SIMSPI(1);}
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 2   

   53   2          else{TFT_SDA_SIMSPI(0);}
   54   2          TFT_SCL_SIMSPI(1);
   55   2          
   56   2          TFT_SCL_SIMSPI(0);
   57   2          dat<<=1;
   58   2        } 
   59   1          TFT_CS_SIMSPI(1);
   60   1      }
   61          
   62          //-------------------------------------------------------------------------------------------------------
             -------------
   63          //  @brief      软件SPI写数据
   64          //  @param      void        
   65          //  @return     void        
   66          
   67          //  Sample usage:     lcd_writeData_simspi(0x00);         
   68          //-------------------------------------------------------------------------------------------------------
             -------------
   69          void lcd_writeData_simspi(uint8 dat)      
   70          {
   71   1        uint8 i=8;
   72   1        
   73   1        TFT_CS_SIMSPI(0);
   74   1        TFT_DC_SIMSPI(1);
   75   1        TFT_SCL_SIMSPI(0);
   76   1        while(i--)
   77   1        {
   78   2          if(dat&0x80){TFT_SDA_SIMSPI(1);}
   79   2          else{TFT_SDA_SIMSPI(0);}
   80   2          TFT_SCL_SIMSPI(1);
   81   2      
   82   2          TFT_SCL_SIMSPI(0);
   83   2          dat<<=1;
   84   2        }
   85   1          TFT_CS_SIMSPI(1);
   86   1      }
   87          
   88          //-------------------------------------------------------------------------------------------------------
             -------------
   89          //  @brief      16位数据写入
   90          //  @param      void        
   91          //  @return     void        
   92          //  Sample usage:     lcd_writeData_16bit_simspi(oxFFFF);          
   93          //-------------------------------------------------------------------------------------------------------
             -------------
   94          void lcd_writeData_16bit_simspi(uint16 dat) 
   95          {
   96   1        uint8 i=16;
   97   1        
   98   1          TFT_CS_SIMSPI(0);
   99   1          TFT_DC_SIMSPI(1);
  100   1          TFT_SCL_SIMSPI(0);
  101   1        
  102   1        while(i--)
  103   1        {
  104   2          if(dat&0x8000){TFT_SDA_SIMSPI(1);}
  105   2          else{TFT_SDA_SIMSPI(0);}
  106   2          TFT_SCL_SIMSPI(1);
  107   2          
  108   2          TFT_SCL_SIMSPI(0);
  109   2          dat<<=1;
  110   2        }
  111   1        
  112   1          TFT_CS_SIMSPI(1);
  113   1      
  114   1      }
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 3   

  115          
  116          //-------------------------------------------------------------------------------------------------------
             -------------
  117          //  @brief      液晶坐标设置
  118          //  @param      x_start       坐标x方向的起点
  119          //  @param      y_start       坐标y方向的起点
  120          //  @param      x_end         坐标x方向的终点
  121          //  @param      y_end         坐标y方向的终点
  122          //  @return     void
  123          //  Sample usage:               lcd_set_region(0,0,10,10);// x、y的起点都是0，终点都是10
  124          //-------------------------------------------------------------------------------------------------------
             -------------
  125          void lcd_set_region_simspi(unsigned int x_start,unsigned int y_start,unsigned int x_end,unsigned int y_en
             -d)
  126          { 
  127   1      
  128   1      #if (0 == TFT_DISPLAY_DIR || 1 == TFT_DISPLAY_DIR)
  129   1        lcd_writeIndex_simspi(0x2a);
  130   1        lcd_writeData_simspi(0x00);
  131   1        lcd_writeData_simspi((uint8)(x_start+2));
  132   1        lcd_writeData_simspi(0x00);
  133   1        lcd_writeData_simspi((uint8)(x_end+2));
  134   1      
  135   1        lcd_writeIndex_simspi(0x2b);
  136   1        lcd_writeData_simspi(0x00);
  137   1        lcd_writeData_simspi((uint8)(y_start+1));
  138   1        lcd_writeData_simspi(0x00);
  139   1        lcd_writeData_simspi((uint8)(y_end+1)); 
  140   1      
  141   1      #elif(2 == TFT_DISPLAY_DIR || 3 == TFT_DISPLAY_DIR)
                 lcd_writeIndex_simspi(0x2a);
                 lcd_writeData_simspi(0x00);
                 lcd_writeData_simspi((uint8)(x_start+1));
                 lcd_writeData_simspi(0x0);
                 lcd_writeData_simspi((uint8)(x_end+1));
               
                 lcd_writeIndex_simspi(0x2b);
                 lcd_writeData_simspi(0x00);
                 lcd_writeData_simspi((uint8)(y_start+2));
                 lcd_writeData_simspi(0x00);
                 lcd_writeData_simspi((uint8)(y_end+2)); 
               
               #endif
  155   1          
  156   1        lcd_writeIndex_simspi(0x2c);
  157   1      }
  158          
  159          //-------------------------------------------------------------------------------------------------------
             -------------
  160          //  @brief      液晶清屏函数
  161          //  @param      color         颜色设置
  162          //  @return     void
  163          //  Sample usage:               lcd_clear(YELLOW);// 全屏设置为黄色
  164          //-------------------------------------------------------------------------------------------------------
             -------------
  165          void lcd_clear_simspi(int color)
  166          {
  167   1        uint8 i,j;
  168   1        lcd_set_region_simspi(0,0,TFT_X_MAX-1,TFT_Y_MAX-1);
  169   1        for (i=0;i<TFT_Y_MAX;i++)
  170   1            for (j=0;j<TFT_X_MAX;j++)
  171   1                lcd_writeData_16bit_simspi(color);
  172   1      }
  173          
  174          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 4   

  175          //  @brief      液晶初始化
  176          //  @return     void
  177          //  Sample usage:        lcd_init_simspi();       
  178          //-------------------------------------------------------------------------------------------------------
             -------------
  179          void lcd_init_simspi(void)
  180          { 
  181   1        
  182   1          TFT_REST_SIMSPI(0);
  183   1          delay_ms(10);
  184   1          TFT_REST_SIMSPI(1);
  185   1          delay_ms(120);
  186   1          lcd_writeIndex_simspi(0x11);
  187   1          delay_ms(120);
  188   1      
  189   1          lcd_writeIndex_simspi(0xB1); 
  190   1          lcd_writeData_simspi(0x01); 
  191   1          lcd_writeData_simspi(0x2C); 
  192   1          lcd_writeData_simspi(0x2D); 
  193   1          
  194   1          lcd_writeIndex_simspi(0xB2); 
  195   1          lcd_writeData_simspi(0x01); 
  196   1          lcd_writeData_simspi(0x2C); 
  197   1          lcd_writeData_simspi(0x2D); 
  198   1          
  199   1          lcd_writeIndex_simspi(0xB3); 
  200   1          lcd_writeData_simspi(0x01); 
  201   1          lcd_writeData_simspi(0x2C); 
  202   1          lcd_writeData_simspi(0x2D); 
  203   1          lcd_writeData_simspi(0x01); 
  204   1          lcd_writeData_simspi(0x2C); 
  205   1          lcd_writeData_simspi(0x2D); 
  206   1          
  207   1          lcd_writeIndex_simspi(0xB4);
  208   1          lcd_writeData_simspi(0x07); 
  209   1      
  210   1          lcd_writeIndex_simspi(0xC0); 
  211   1          lcd_writeData_simspi(0xA2); 
  212   1          lcd_writeData_simspi(0x02); 
  213   1          lcd_writeData_simspi(0x84); 
  214   1          lcd_writeIndex_simspi(0xC1); 
  215   1          lcd_writeData_simspi(0xC5); 
  216   1          
  217   1          lcd_writeIndex_simspi(0xC2); 
  218   1          lcd_writeData_simspi(0x0A); 
  219   1          lcd_writeData_simspi(0x00); 
  220   1          
  221   1          lcd_writeIndex_simspi(0xC3); 
  222   1          lcd_writeData_simspi(0x8A); 
  223   1          lcd_writeData_simspi(0x2A); 
  224   1          lcd_writeIndex_simspi(0xC4); 
  225   1          lcd_writeData_simspi(0x8A); 
  226   1          lcd_writeData_simspi(0xEE); 
  227   1          
  228   1          lcd_writeIndex_simspi(0xC5);
  229   1          lcd_writeData_simspi(0x0E); 
  230   1          
  231   1          lcd_writeIndex_simspi(0x36);
  232   1          switch(TFT_DISPLAY_DIR)//y x v
  233   1          {
  234   2            case 0: lcd_writeData_simspi(1<<7 | 1<<6 | 0<<5);  break;  //竖屏模式
  235   2            case 1: lcd_writeData_simspi(0<<7 | 0<<6 | 0<<5);  break;  //竖屏模式  旋转180
  236   2            case 2: lcd_writeData_simspi(1<<7 | 0<<6 | 1<<5);  break;  //横屏模式
  237   2            case 3: lcd_writeData_simspi(0<<7 | 1<<6 | 1<<5);  break;  //横屏模式  旋转180
  238   2          }
  239   1      
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 5   

  240   1          lcd_writeIndex_simspi(0xe0); 
  241   1          lcd_writeData_simspi(0x0f); 
  242   1          lcd_writeData_simspi(0x1a); 
  243   1          lcd_writeData_simspi(0x0f); 
  244   1          lcd_writeData_simspi(0x18); 
  245   1          lcd_writeData_simspi(0x2f); 
  246   1          lcd_writeData_simspi(0x28); 
  247   1          lcd_writeData_simspi(0x20); 
  248   1          lcd_writeData_simspi(0x22); 
  249   1          lcd_writeData_simspi(0x1f); 
  250   1          lcd_writeData_simspi(0x1b); 
  251   1          lcd_writeData_simspi(0x23); 
  252   1          lcd_writeData_simspi(0x37); 
  253   1          lcd_writeData_simspi(0x00);   
  254   1          lcd_writeData_simspi(0x07); 
  255   1          lcd_writeData_simspi(0x02); 
  256   1          lcd_writeData_simspi(0x10); 
  257   1          
  258   1          lcd_writeIndex_simspi(0xe1); 
  259   1          lcd_writeData_simspi(0x0f); 
  260   1          lcd_writeData_simspi(0x1b); 
  261   1          lcd_writeData_simspi(0x0f); 
  262   1          lcd_writeData_simspi(0x17); 
  263   1          lcd_writeData_simspi(0x33); 
  264   1          lcd_writeData_simspi(0x2c); 
  265   1          lcd_writeData_simspi(0x29); 
  266   1          lcd_writeData_simspi(0x2e); 
  267   1          lcd_writeData_simspi(0x30); 
  268   1          lcd_writeData_simspi(0x30); 
  269   1          lcd_writeData_simspi(0x39); 
  270   1          lcd_writeData_simspi(0x3f); 
  271   1          lcd_writeData_simspi(0x00); 
  272   1          lcd_writeData_simspi(0x07); 
  273   1          lcd_writeData_simspi(0x03); 
  274   1          lcd_writeData_simspi(0x10);  
  275   1          
  276   1          lcd_writeIndex_simspi(0x2a);
  277   1          lcd_writeData_simspi(0x00);
  278   1          lcd_writeData_simspi(0x00+2);
  279   1          lcd_writeData_simspi(0x00);
  280   1          lcd_writeData_simspi(0x80+2);
  281   1          
  282   1          lcd_writeIndex_simspi(0x2b);
  283   1          lcd_writeData_simspi(0x00);
  284   1          lcd_writeData_simspi(0x00+3);
  285   1          lcd_writeData_simspi(0x00);
  286   1          lcd_writeData_simspi(0x80+3);
  287   1          
  288   1          lcd_writeIndex_simspi(0xF0); 
  289   1          lcd_writeData_simspi(0x01); 
  290   1          lcd_writeIndex_simspi(0xF6);
  291   1          lcd_writeData_simspi(0x00); 
  292   1          
  293   1          lcd_writeIndex_simspi(0x3A);
  294   1          lcd_writeData_simspi(0x05); 
  295   1          lcd_writeIndex_simspi(0x29);
  296   1      
  297   1          lcd_clear_simspi(WHITE);//全白
  298   1      }
  299          
  300          //-------------------------------------------------------------------------------------------------------
             -------------
  301          //  @brief      液晶画点
  302          //  @param      x               坐标x方向的起点
  303          //  @param      y               坐标y方向的起点
  304          //  @param      color             需要显示的颜色
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 6   

  305          //  @return     void
  306          //  Sample usage:               lcd_drawpoint(0,0,RED);  //坐标0,0画一个红色的点
  307          //-------------------------------------------------------------------------------------------------------
             -------------
  308          void lcd_drawpoint_simspi(uint16 x,uint16 y,uint16 color)
  309          {
  310   1          lcd_set_region_simspi(x,y,x,y);
  311   1          lcd_writeData_16bit_simspi(color);
  312   1      }
  313          
  314          //-------------------------------------------------------------------------------------------------------
             -------------
  315          //  @brief      液晶显示字符
  316          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  317          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  318          //  @param      dat             需要显示的字符
  319          //  @return     void
  320          //  Sample usage:               lcd_showchar(0,0,'x');//坐标0,0写一个字符x
  321          //-------------------------------------------------------------------------------------------------------
             -------------
  322          void lcd_showchar_simspi(uint16 x,uint16 y,const int8 dat)
  323          {
  324   1        uint8 i,j;
  325   1        uint8 temp;
  326   1          
  327   1        for(i=0; i<16; i++)
  328   1        {
  329   2          lcd_set_region_simspi(x,y+i,x+7,y+i);
  330   2          temp = tft_ascii[dat-32][i];//减32因为是取模是从空格开始取得 空格在ascii中序号是32
  331   2          for(j=0; j<8; j++)
  332   2          {
  333   3            if(temp&0x01) lcd_writeData_16bit_simspi(TFT_PENCOLOR);
  334   3            else      lcd_writeData_16bit_simspi(TFT_BGCOLOR);
  335   3            temp>>=1;
  336   3          }
  337   2        }
  338   1      }
  339          
  340          //-------------------------------------------------------------------------------------------------------
             -------------
  341          //  @brief      液晶显示字符串
  342          //  @param      x               坐标x方向的起点  参数范围 0 -（TFT_X_MAX-1）
  343          //  @param      y               坐标y方向的起点  参数范围 0 -（TFT_Y_MAX/16-1）
  344          //  @param      dat             需要显示的字符串
  345          //  @return     void
  346          //  Sample usage:               lcd_showstr(0,0,"seekfree");
  347          //-------------------------------------------------------------------------------------------------------
             -------------
  348          void lcd_showstr_simspi(uint16 x,uint16 y,const int8 dat[])
  349          {
  350   1        uint16 j;
  351   1        
  352   1        j = 0;
  353   1        while(dat[j] != '\0')
  354   1        {
  355   2          lcd_showchar_simspi(x+8*j,y*16,dat[j]);
  356   2          j++;
  357   2        }
  358   1      }
  359          
  360          //-------------------------------------------------------------------------------------------------------
             -------------
  361          //  @brief      液晶显示8位有符号
  362          //  @param      x               坐标x方向的起点  参数范围 0 -（TFT_X_MAX-1）
  363          //  @param      y               坐标y方向的起点  参数范围 0 -（TFT_Y_MAX/16-1）
  364          //  @param      dat             需要显示的变量，数据类型int8
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 7   

  365          //  @return     void
  366          //  Sample usage:               lcd_showint8(0,0,x);//x为int8类型
  367          //-------------------------------------------------------------------------------------------------------
             -------------
  368          void lcd_showint8_simspi(uint16 x,uint16 y,int8 dat)
  369          {
  370   1        uint8 a[3];
  371   1        uint8 i;
  372   1        if(dat<0)
  373   1        {
  374   2          lcd_showchar_simspi(x,y*16,'-');
  375   2          dat = -dat;
  376   2        }
  377   1        else  lcd_showchar_simspi(x,y*16,' ');
  378   1        
  379   1        a[0] = dat/100;
  380   1        a[1] = dat/10%10;
  381   1        a[2] = dat%10;
  382   1        i = 0;
  383   1        while(i<3)
  384   1        {
  385   2          lcd_showchar_simspi((uint8)(x+(8*(i+1))), (uint8)(y*16),(int8)('0' + a[i]));
  386   2          i++;
  387   2        }
  388   1      }
  389          
  390          //-------------------------------------------------------------------------------------------------------
             -------------
  391          //  @brief      液晶显示8位无符号
  392          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  393          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  394          //  @param      dat             需要显示的变量，数据类型uint8
  395          //  @return     void
  396          //  Sample usage:               lcd_showuint8(0,0,x);//x为uint8类型
  397          //-------------------------------------------------------------------------------------------------------
             -------------
  398          void lcd_showuint8_simspi(uint16 x,uint16 y,uint8 dat)
  399          {
  400   1        uint8 a[3];
  401   1        uint8 i;
  402   1        
  403   1        a[0] = dat/100;
  404   1        a[1] = dat/10%10;
  405   1        a[2] = dat%10;
  406   1        i = 0;
  407   1        while(i<3)
  408   1        {
  409   2          lcd_showchar_simspi((uint8)(x+(8*(i+1))), (uint8)(y*16),(int8)('0' + a[i]));
  410   2          i++;
  411   2        }
  412   1        
  413   1      }
  414          
  415          //-------------------------------------------------------------------------------------------------------
             -------------
  416          //  @brief      液晶显示16位有符号
  417          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  418          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  419          //  @param      dat             需要显示的变量，数据类型int16
  420          //  @return     void
  421          //  Sample usage:               lcd_showint16(0,0,x);//x为int16类型
  422          //-------------------------------------------------------------------------------------------------------
             -------------
  423          void lcd_showint16_simspi(uint16 x,uint16 y,int16 dat)
  424          {
  425   1        uint8 a[5];
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 8   

  426   1        uint8 i;
  427   1        if(dat<0)
  428   1        {
  429   2          lcd_showchar_simspi(x,y*16,'-');
  430   2          dat = -dat;
  431   2        }
  432   1        else  lcd_showchar_simspi(x,y*16,' ');
  433   1      
  434   1        a[0] = dat/10000;
  435   1        a[1] = dat/1000%10;
  436   1        a[2] = dat/100%10;
  437   1        a[3] = dat/10%10;
  438   1        a[4] = dat%10;
  439   1        
  440   1        i = 0;
  441   1        while(i<5)
  442   1        {
  443   2          lcd_showchar_simspi((uint8)(x+(8*(i+1))), (uint8)(y*16),(int8)('0' + a[i]));
  444   2          i++;
  445   2        }
  446   1      }
  447          
  448          //-------------------------------------------------------------------------------------------------------
             -------------
  449          //  @brief      液晶显示16位无符号
  450          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  451          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  452          //  @param      dat             需要显示的变量，数据类型uint16
  453          //  @return     void
  454          //  Sample usage:               lcd_showuint16(0,0,x);//x为uint16类型
  455          //-------------------------------------------------------------------------------------------------------
             -------------
  456          void lcd_showuint16_simspi(uint16 x,uint16 y,uint16 dat)
  457          {
  458   1        uint8 a[5];
  459   1        uint8 i;
  460   1      
  461   1        a[0] = dat/10000;
  462   1        a[1] = dat/1000%10;
  463   1        a[2] = dat/100%10;
  464   1        a[3] = dat/10%10;
  465   1        a[4] = dat%10;
  466   1        
  467   1        i = 0;
  468   1        while(i<5)
  469   1        {
  470   2          lcd_showchar_simspi((uint8)(x+(8*(i+1))), (uint8)(y*16),(int8)('0' + a[i]));
  471   2          i++;
  472   2        }
  473   1      }
  474          
  475          //-------------------------------------------------------------------------------------------------------
             -------------
  476          //  @brief      液晶显示32位有符号(去除整数部分无效的0)
  477          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  478          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  479          //  @param      dat             需要显示的变量，数据类型uint32
  480          //  @param      num             需要显示的位数 最高10位  不包含正负号
  481          //  @return     void
  482          //  Sample usage:               lcd_showuint32(0,0,x,3);//x可以为int32 uint16 int16 uint8 int8类型
  483          //  Sample usage:               负数会显示一个 ‘-’号   正数显示一个空格
  484          //-------------------------------------------------------------------------------------------------------
             -------------
  485          void lcd_showint32_simspi(uint16 x,uint16 y,int32 dat,uint8 num)
  486          {
  487   1          int8    buff[34];
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 9   

  488   1          uint8   length;
  489   1          
  490   1          if(10<num)      num = 10;
  491   1          
  492   1          num++;
  493   1          if(0>dat)   length = sfprint( &buff[0],"%d",dat);//负数
  494   1          else
  495   1          {
  496   2              buff[0] = ' ';
  497   2              length = sfprint( &buff[1],"%d",dat);
  498   2              length++;
  499   2          }
  500   1          while(length < num)
  501   1          {
  502   2              buff[length] = ' ';
  503   2              length++;
  504   2          }
  505   1          buff[num] = '\0';
  506   1      
  507   1          lcd_showstr_simspi(x, y, buff); //显示数字
  508   1      }
  509          
  510          //-------------------------------------------------------------------------------------------------------
             -------------
  511          //  @brief      液晶显示浮点数(去除整数部分无效的0)
  512          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  513          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  514          //  @param      dat             需要显示的变量，数据类型float或double
  515          //  @param      num             整数位显示长度   最高10位  
  516          //  @param      pointnum        小数位显示长度   最高6位
  517          //  @return     void
  518          //  Sample usage:               lcd_showfloat(0,0,x,2,3);//显示浮点数   整数显示2位   小数显示三位
  519          //  @note                       特别注意当发现小数部分显示的值与你写入的值不一样的时候，
  520          //                              可能是由于浮点数精度丢失问题导致的，这并不是显示函数的问题，
  521          //                              有关问题的详情，请自行百度学习   浮点数精度丢失问题。
  522          //                              负数会显示一个 ‘-’号   正数显示一个空格
  523          //-------------------------------------------------------------------------------------------------------
             -------------
  524          void lcd_showfloat_simspi(uint16 x,uint16 y,double dat,uint8 num,uint8 pointnum)
  525          {
  526   1        uint8   length;
  527   1        int8    buff[34];
  528   1        int8    start,end,point;
  529   1      
  530   1        if(6<pointnum)  pointnum = 6;
  531   1          if(10<num)      num = 10;
  532   1              
  533   1          if(0>dat)   length = sfprint( &buff[0],"%f",dat);//负数
  534   1          else
  535   1          {
  536   2              length = sfprint( &buff[1],"%f",dat);
  537   2              length++;
  538   2          }
  539   1          point = length - 7;         //计算小数点位置
  540   1          start = point - num - 1;    //计算起始位
  541   1          end = point + pointnum + 1; //计算结束位
  542   1          while(0>start)//整数位不够  末尾应该填充空格
  543   1          {
  544   2              buff[end] = ' ';
  545   2              end++;
  546   2              start++;
  547   2          }
  548   1          
  549   1          if(0>dat)   buff[start] = '-';
  550   1          else        buff[start] = ' ';
  551   1          
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 10  

  552   1          buff[end] = '\0';
  553   1      
  554   1          lcd_showstr_simspi(x, y, buff); //显示数字
  555   1      }
  556          
  557          
  558          //-------------------------------------------------------------------------------------------------------
             -------------
  559          //  以下函数是使用硬件SPI通信，相比较软件IIC，速度比软件IIC快。
  560          //-------------------------------------------------------------------------------------------------------
             -------------
  561          
  562          
  563          //-------------------------------------------------------------------------------------------------------
             -------------
  564          //  @brief      硬件SPI写命令
  565          //  @param      void        
  566          //  @return     void        
  567          //  Sample usage:   lcd_writeIndex(0x2a);         
  568          //-------------------------------------------------------------------------------------------------------
             -------------
  569          void lcd_writeIndex(uint8 dat)      
  570          { 
  571   1        
  572   1        TFT_CS(0);
  573   1        TFT_DC(0);
  574   1        spi_mosi(dat);
  575   1        TFT_CS(1);
  576   1      }
  577          
  578          //-------------------------------------------------------------------------------------------------------
             -------------
  579          //  @brief      硬件SPI写数据
  580          //  @param      void        
  581          //  @return     void        
  582          //  Sample usage:    lcd_writeData_simspi(0x00);       
  583          //-------------------------------------------------------------------------------------------------------
             -------------
  584          void lcd_writeData(uint8 dat)     
  585          {
  586   1        TFT_CS(0);
  587   1        TFT_DC(1);
  588   1        spi_mosi(dat);
  589   1        TFT_CS(1);
  590   1      }
  591          
  592          //-------------------------------------------------------------------------------------------------------
             -------------
  593          //  @brief      16位数据写入
  594          //  @param      void        
  595          //  @return     void        
  596          //  Sample usage:    lcd_writeData_16bit_simspi(oxFFFF);                
  597          //-------------------------------------------------------------------------------------------------------
             -------------
  598          void lcd_writedata_16bit(uint16 dat)  
  599          {
  600   1      
  601   1        uint8 dat1[2];
  602   1        dat1[0] = dat >> 8;
  603   1        dat1[1] = (uint8)dat;
  604   1        
  605   1        TFT_CS(0);
  606   1        TFT_DC(1);
  607   1        spi_mosi(dat1[0]);
  608   1        spi_mosi(dat1[1]);
  609   1        TFT_CS(1);
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 11  

  610   1      
  611   1      }
  612          
  613          //-------------------------------------------------------------------------------------------------------
             -------------
  614          //  @brief      液晶坐标设置
  615          //  @param      x_start       坐标x方向的起点
  616          //  @param      y_start       坐标y方向的起点
  617          //  @param      x_end         坐标x方向的终点
  618          //  @param      y_end         坐标y方向的终点
  619          //  @return     void
  620          //  Sample usage:               lcd_set_region(0,0,10,10);// x、y的起点都是0，终点都是10
  621          //-------------------------------------------------------------------------------------------------------
             -------------
  622          void lcd_set_region(unsigned int x_start,unsigned int y_start,unsigned int x_end,unsigned int y_end)
  623          { 
  624   1      
  625   1          
  626   1      #if (0 == TFT_DISPLAY_DIR || 1 == TFT_DISPLAY_DIR)
  627   1        lcd_writeIndex(0x2a);
  628   1        lcd_writeData(0x00);
  629   1      //  lcd_writeData((uint8)(x_start+2));
  630   1        lcd_writeData((uint8)(x_start));
  631   1        lcd_writeData(0x00);
  632   1        lcd_writeData((uint8)(x_end));
  633   1      
  634   1        lcd_writeIndex(0x2b);
  635   1        lcd_writeData(0x00);
  636   1      //  lcd_writeData((uint8)(y_start+1));
  637   1        lcd_writeData((uint8)(y_start));
  638   1        lcd_writeData(0x00);
  639   1        lcd_writeData((uint8)(y_end));  
  640   1      
  641   1      #elif(2 == TFT_DISPLAY_DIR || 3 == TFT_DISPLAY_DIR)
                 lcd_writeIndex(0x2a);
                 lcd_writeData(0x00);
                 lcd_writeData((uint8)(x_start+1));
                 lcd_writeData(0x0);
                 lcd_writeData((uint8)(x_end+1));
               
                 lcd_writeIndex(0x2b);
                 lcd_writeData(0x00);
                 lcd_writeData((uint8)(y_start+2));
                 lcd_writeData(0x00);
                 lcd_writeData((uint8)(y_end+2));  
               
               #endif
  655   1          
  656   1         lcd_writeIndex(0x2c);
  657   1      }
  658          
  659          //-------------------------------------------------------------------------------------------------------
             -------------
  660          //  @brief      液晶清屏函数
  661          //  @param      color         颜色设置
  662          //  @return     void
  663          //  Sample usage:         lcd_clear(YELLOW);// 全屏设置为黄色
  664          //-------------------------------------------------------------------------------------------------------
             -------------
  665          void lcd_clear(int color)
  666          {
  667   1        uint8 i,j;
  668   1        lcd_set_region(0,0,TFT_X_MAX-1,TFT_Y_MAX-1);
  669   1        for (i=0;i<TFT_Y_MAX;i++)
  670   1            for (j=0;j<TFT_X_MAX;j++)
  671   1                lcd_writedata_16bit(color);
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 12  

  672   1      }
  673          
  674          
  675          //-------------------------------------------------------------------------------------------------------
             -------------
  676          //  @brief      液晶初始化
  677          //  @return     void
  678          //  Sample usage:         lcd_init();         
  679          //-------------------------------------------------------------------------------------------------------
             -------------
  680          void lcd_init(void)
  681          { 
  682   1        spi_init(TFT_SPIN, TFT_SCL_PIN, TFT_SDA_PIN, TFT_SDA_IN_PIN, 0, MASTER, SPI_SYSclk_DIV_4);
  683   1      
  684   1          TFT_REST(0);
  685   1          delay_ms(10);
  686   1          TFT_REST(1);
  687   1          delay_ms(120);
  688   1          lcd_writeIndex(0x11);
  689   1          delay_ms(120);
  690   1      
  691   1          lcd_writeIndex(0xB1); 
  692   1          lcd_writeData(0x01); 
  693   1          lcd_writeData(0x2C); 
  694   1          lcd_writeData(0x2D); 
  695   1          
  696   1          lcd_writeIndex(0xB2); 
  697   1          lcd_writeData(0x01); 
  698   1          lcd_writeData(0x2C); 
  699   1          lcd_writeData(0x2D); 
  700   1          
  701   1          lcd_writeIndex(0xB3); 
  702   1          lcd_writeData(0x01); 
  703   1          lcd_writeData(0x2C); 
  704   1          lcd_writeData(0x2D); 
  705   1          lcd_writeData(0x01); 
  706   1          lcd_writeData(0x2C); 
  707   1          lcd_writeData(0x2D); 
  708   1          
  709   1          lcd_writeIndex(0xB4);
  710   1          lcd_writeData(0x07); 
  711   1      
  712   1          lcd_writeIndex(0xC0); 
  713   1          lcd_writeData(0xA2); 
  714   1          lcd_writeData(0x02); 
  715   1          lcd_writeData(0x84); 
  716   1          lcd_writeIndex(0xC1); 
  717   1          lcd_writeData(0xC5); 
  718   1          
  719   1          lcd_writeIndex(0xC2); 
  720   1          lcd_writeData(0x0A); 
  721   1          lcd_writeData(0x00); 
  722   1          
  723   1          lcd_writeIndex(0xC3); 
  724   1          lcd_writeData(0x8A); 
  725   1          lcd_writeData(0x2A); 
  726   1          lcd_writeIndex(0xC4); 
  727   1          lcd_writeData(0x8A); 
  728   1          lcd_writeData(0xEE); 
  729   1          
  730   1          lcd_writeIndex(0xC5);
  731   1          lcd_writeData(0x0E); 
  732   1          
  733   1          lcd_writeIndex(0x36);
  734   1        
  735   1        #if(0 == TFT_DISPLAY_DIR)
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 13  

  736   1          lcd_writeData(1<<7 | 1<<6 | 0<<5);
  737   1        #elif(1 == TFT_DISPLAY_DIR)
                   lcd_writeData(0<<7 | 0<<6 | 0<<5);
                 #elif(2 == TFT_DISPLAY_DIR)
                   lcd_writeData(1<<7 | 0<<6 | 1<<5);
                 #else
                   lcd_writeData(0<<7 | 1<<6 | 1<<5);
                 #endif
  744   1        
  745   1          lcd_writeIndex(0xe0); 
  746   1          lcd_writeData(0x0f); 
  747   1          lcd_writeData(0x1a); 
  748   1          lcd_writeData(0x0f); 
  749   1          lcd_writeData(0x18); 
  750   1          lcd_writeData(0x2f); 
  751   1          lcd_writeData(0x28); 
  752   1          lcd_writeData(0x20); 
  753   1          lcd_writeData(0x22); 
  754   1          lcd_writeData(0x1f); 
  755   1          lcd_writeData(0x1b); 
  756   1          lcd_writeData(0x23); 
  757   1          lcd_writeData(0x37); 
  758   1          lcd_writeData(0x00);  
  759   1          lcd_writeData(0x07); 
  760   1          lcd_writeData(0x02); 
  761   1          lcd_writeData(0x10); 
  762   1          
  763   1          lcd_writeIndex(0xe1); 
  764   1          lcd_writeData(0x0f); 
  765   1          lcd_writeData(0x1b); 
  766   1          lcd_writeData(0x0f); 
  767   1          lcd_writeData(0x17); 
  768   1          lcd_writeData(0x33); 
  769   1          lcd_writeData(0x2c); 
  770   1          lcd_writeData(0x29); 
  771   1          lcd_writeData(0x2e); 
  772   1          lcd_writeData(0x30); 
  773   1          lcd_writeData(0x30); 
  774   1          lcd_writeData(0x39); 
  775   1          lcd_writeData(0x3f); 
  776   1          lcd_writeData(0x00); 
  777   1          lcd_writeData(0x07); 
  778   1          lcd_writeData(0x03); 
  779   1          lcd_writeData(0x10);  
  780   1          
  781   1          lcd_writeIndex(0x2a);
  782   1          lcd_writeData(0x00);
  783   1          lcd_writeData(0x00+2);
  784   1          lcd_writeData(0x00);
  785   1          lcd_writeData(0x80+2);
  786   1          
  787   1          lcd_writeIndex(0x2b);
  788   1          lcd_writeData(0x00);
  789   1          lcd_writeData(0x00+3);
  790   1          lcd_writeData(0x00);
  791   1          lcd_writeData(0x80+3);
  792   1          
  793   1          lcd_writeIndex(0xF0); 
  794   1          lcd_writeData(0x01); 
  795   1          lcd_writeIndex(0xF6);
  796   1          lcd_writeData(0x00); 
  797   1          
  798   1          lcd_writeIndex(0x3A);
  799   1          lcd_writeData(0x05); 
  800   1          lcd_writeIndex(0x29);
  801   1      
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 14  

  802   1          lcd_clear(WHITE);//全白
  803   1      }
  804          
  805          //-------------------------------------------------------------------------------------------------------
             -------------
  806          //  @brief      液晶画点
  807          //  @param      x               坐标x方向的起点
  808          //  @param      y               坐标y方向的起点
  809          //  @param      dat             需要显示的颜色
  810          //  @return     void
  811          //  Sample usage:               lcd_drawpoint(0,0,RED);  //坐标0,0画一个红色的点
  812          //-------------------------------------------------------------------------------------------------------
             -------------
  813          void lcd_drawpoint(uint16 x,uint16 y,uint16 color)
  814          {
  815   1          lcd_set_region(x,y,x,y);
  816   1          lcd_writedata_16bit(color);
  817   1      }
  818          
  819          //-------------------------------------------------------------------------------------------------------
             -------------
  820          //  @brief      液晶显示字符
  821          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  822          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  823          //  @param      dat             需要显示的字符
  824          //  @return     void
  825          //  Sample usage:               lcd_showchar(0,0,'x');//坐标0,0写一个字符x
  826          //-------------------------------------------------------------------------------------------------------
             -------------
  827          void lcd_showchar(uint16 x,uint16 y,const int8 dat)
  828          {
  829   1        uint8 i,j;
  830   1        uint8 temp;
  831   1          
  832   1        for(i=0; i<16; i++)
  833   1        {
  834   2          lcd_set_region(x,y+i,x+7,y+i);
  835   2          temp = tft_ascii[dat-32][i];//减32因为是取模是从空格开始取得 空格在ascii中序号是32
  836   2          for(j=0; j<8; j++)
  837   2          {
  838   3            if(temp&0x01) lcd_writedata_16bit(TFT_PENCOLOR);
  839   3            else      lcd_writedata_16bit(TFT_BGCOLOR);
  840   3            temp>>=1;
  841   3          }
  842   2        }
  843   1      }
  844          
  845          //-------------------------------------------------------------------------------------------------------
             -------------
  846          //  @brief      液晶显示字符串
  847          //  @param      x               坐标x方向的起点  参数范围 0 -（TFT_X_MAX-1）
  848          //  @param      y               坐标y方向的起点  参数范围 0 -（TFT_Y_MAX/16-1）
  849          //  @param      dat             需要显示的字符串
  850          //  @return     void
  851          //  Sample usage:               lcd_showstr(0,0,"seekfree");
  852          //-------------------------------------------------------------------------------------------------------
             -------------
  853          void lcd_showstr(uint16 x,uint16 y,const int8 dat[])
  854          {
  855   1        uint16 j;
  856   1        
  857   1        j = 0;
  858   1        while(dat[j] != '\0')
  859   1        {
  860   2          lcd_showchar(x+8*j,y*16,dat[j]);
  861   2          j++;
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 15  

  862   2        }
  863   1      }
  864          
  865          //-------------------------------------------------------------------------------------------------------
             -------------
  866          //  @brief      液晶显示8位有符号
  867          //  @param      x               坐标x方向的起点  参数范围 0 -（TFT_X_MAX-1）
  868          //  @param      y               坐标y方向的起点  参数范围 0 -（TFT_Y_MAX/16-1）
  869          //  @param      dat             需要显示的变量，数据类型int8
  870          //  @return     void
  871          //  Sample usage:               lcd_showint8(0,0,x);//x为int8类型
  872          //-------------------------------------------------------------------------------------------------------
             -------------
  873          void lcd_showint8(uint16 x,uint16 y,int8 dat)
  874          {
  875   1        uint8 a[3];
  876   1        uint8 i;
  877   1        if(dat<0)
  878   1        {
  879   2          lcd_showchar(x,y*16,'-');
  880   2          dat = -dat;
  881   2        }
  882   1        else  lcd_showchar(x,y*16,' ');
  883   1        
  884   1        a[0] = dat/100;
  885   1        a[1] = dat/10%10;
  886   1        a[2] = dat%10;
  887   1        i = 0;
  888   1        while(i<3)
  889   1        {
  890   2          lcd_showchar((uint8)(x+(8*(i+1))), (uint8)(y*16),(int8)('0' + a[i]));
  891   2          i++;
  892   2        }
  893   1      }
  894          
  895          //-------------------------------------------------------------------------------------------------------
             -------------
  896          //  @brief      液晶显示8位无符号
  897          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  898          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  899          //  @param      dat             需要显示的变量，数据类型uint8
  900          //  @return     void
  901          //  Sample usage:               lcd_showuint8(0,0,x);//x为uint8类型
  902          //-------------------------------------------------------------------------------------------------------
             -------------
  903          void lcd_showuint8(uint16 x,uint16 y,uint8 dat)
  904          {
  905   1        uint8 a[3];
  906   1        uint8 i;
  907   1        
  908   1        a[0] = dat/100;
  909   1        a[1] = dat/10%10;
  910   1        a[2] = dat%10;
  911   1        i = 0;
  912   1        while(i<3)
  913   1        {
  914   2          lcd_showchar((uint8)(x+(8*(i+1))), (uint8)(y*16),(int8)('0' + a[i]));
  915   2          i++;
  916   2        }
  917   1        
  918   1      }
  919          
  920          //-------------------------------------------------------------------------------------------------------
             -------------
  921          //  @brief      液晶显示16位有符号
  922          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 16  

  923          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  924          //  @param      dat             需要显示的变量，数据类型int16
  925          //  @return     void
  926          //  Sample usage:               lcd_showint16(0,0,x);//x为int16类型
  927          //-------------------------------------------------------------------------------------------------------
             -------------
  928          void lcd_showint16(uint16 x,uint16 y,int16 dat)
  929          {
  930   1        uint8 a[5];
  931   1        uint8 i;
  932   1        if(dat<0)
  933   1        {
  934   2          lcd_showchar(x,y*16,'-');
  935   2          dat = -dat;
  936   2        }
  937   1        else  lcd_showchar(x,y*16,' ');
  938   1      
  939   1        a[0] = dat/10000;
  940   1        a[1] = dat/1000%10;
  941   1        a[2] = dat/100%10;
  942   1        a[3] = dat/10%10;
  943   1        a[4] = dat%10;
  944   1        
  945   1        i = 0;
  946   1        while(i<5)
  947   1        {
  948   2          lcd_showchar((uint8)(x+(8*(i+1))), (uint8)(y*16),(int8)('0' + a[i]));
  949   2          i++;
  950   2        }
  951   1      }
  952          
  953          //-------------------------------------------------------------------------------------------------------
             -------------
  954          //  @brief      液晶显示16位无符号
  955          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  956          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  957          //  @param      dat             需要显示的变量，数据类型uint16
  958          //  @return     void
  959          //  Sample usage:               lcd_showuint16(0,0,x);//x为uint16类型
  960          //-------------------------------------------------------------------------------------------------------
             -------------
  961          void lcd_showuint16(uint16 x,uint16 y,uint16 dat)
  962          {
  963   1        uint8 a[5];
  964   1        uint8 i;
  965   1      
  966   1        a[0] = dat/10000;
  967   1        a[1] = dat/1000%10;
  968   1        a[2] = dat/100%10;
  969   1        a[3] = dat/10%10;
  970   1        a[4] = dat%10;
  971   1        
  972   1        i = 0;
  973   1        while(i<5)
  974   1        {
  975   2          lcd_showchar((uint8)(x+(8*(i+1))), (uint8)(y*16),(int8)('0' + a[i]));
  976   2          i++;
  977   2        }
  978   1      }
  979          
  980          //-------------------------------------------------------------------------------------------------------
             -------------
  981          //  @brief      液晶显示32位有符号(去除整数部分无效的0)
  982          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
  983          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
  984          //  @param      dat             需要显示的变量，数据类型uint32
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 17  

  985          //  @param      num             需要显示的位数 最高10位  不包含正负号
  986          //  @return       
  987          //  Sample usage:               lcd_showuint32(0,0,x,3);//x可以为int32 uint16 int16 uint8 int8类型
  988          //  Sample usage:               负数会显示一个 ‘-’号   正数显示一个空格
  989          //-------------------------------------------------------------------------------------------------------
             -------------
  990          void lcd_showint32(uint16 x,uint16 y,int32 dat,uint8 num)
  991          {
  992   1          int8    buff[34];
  993   1          uint8   length;
  994   1          
  995   1          if(10<num)      num = 10;
  996   1          
  997   1          num++;
  998   1          if(0>dat)   length = sfprint( &buff[0],"%d",dat);//负数
  999   1          else
 1000   1          {
 1001   2            buff[0] = ' ';
 1002   2            length = sfprint( &buff[1],"%d",dat);
 1003   2            length++;
 1004   2          }
 1005   1          while(length < num)
 1006   1          {
 1007   2            buff[length] = ' ';
 1008   2            length++;
 1009   2          }
 1010   1          buff[num] = '\0';
 1011   1      
 1012   1          lcd_showstr(x, y, buff);  //显示数字
 1013   1      }
 1014          
 1015          
 1016          //-------------------------------------------------------------------------------------------------------
             -------------
 1017          //  @brief      液晶显示浮点数(去除整数部分无效的0)
 1018          //  @param      x               坐标x方向的起点 参数范围 0 -（TFT_X_MAX-1）
 1019          //  @param      y               坐标y方向的起点 参数范围 0 -（TFT_Y_MAX/16-1）
 1020          //  @param      dat             需要显示的变量，数据类型float或double
 1021          //  @param      num             整数位显示长度   最高10位  
 1022          //  @param      pointnum        小数位显示长度   最高6位
 1023          //  @return     void
 1024          //  Sample usage:               lcd_showfloat(0,0,x,2,3);//显示浮点数   整数显示2位   小数显示三位
 1025          //  @note                       特别注意当发现小数部分显示的值与你写入的值不一样的时候，
 1026          //                              可能是由于浮点数精度丢失问题导致的，这并不是显示函数的问题，
 1027          //                              有关问题的详情，请自行百度学习   浮点数精度丢失问题。
 1028          //                              负数会显示一个 ‘-’号   正数显示一个空格
 1029          //-------------------------------------------------------------------------------------------------------
             -------------
 1030          void lcd_showfloat(uint16 x,uint16 y,double dat,uint8 num,uint8 pointnum)
 1031          {
 1032   1        uint8   length;
 1033   1        int8    buff[34];
 1034   1        int8    start,end,point;
 1035   1      
 1036   1        if(6<pointnum)  pointnum = 6;
 1037   1          if(10<num)      num = 10;
 1038   1              
 1039   1          if(0>dat)   length = sfprint( &buff[0],"%f",dat);//负数
 1040   1          else
 1041   1          {
 1042   2            length = sfprint( &buff[1],"%f",dat);
 1043   2            length++;
 1044   2          }
 1045   1          point = length - 7;         //计算小数点位置
 1046   1          start = point - num - 1;    //计算起始位
 1047   1          end = point + pointnum + 1; //计算结束位
C251 COMPILER V5.60.0,  18TFT                                                              08/03/24  19:26:53  PAGE 18  

 1048   1          while(0>start)//整数位不够  末尾应该填充空格
 1049   1          {
 1050   2            buff[end] = ' ';
 1051   2            end++;
 1052   2            start++;
 1053   2          }
 1054   1          
 1055   1          if(0>dat)   buff[start] = '-';
 1056   1          else        buff[start] = ' ';
 1057   1          
 1058   1          buff[end] = '\0';
 1059   1      
 1060   1          lcd_showstr(x, y, buff);  //显示数字
 1061   1      }
 1062          
 1063          //-------------------------------------------------------------------------------------------------------
             -------------
 1064          //  @brief      显示40*40 QQ图片
 1065          //  @param      *p          图像数组地址
 1066          //  @return     void
 1067          
 1068          //  Sample usage:          
 1069          //-------------------------------------------------------------------------------------------------------
             -------------
 1070          void showimage(const unsigned char *p) 
 1071          {
 1072   1          int i,j,k; 
 1073   1        unsigned char picH,picL;
 1074   1        lcd_clear(WHITE); //清屏  
 1075   1        
 1076   1        for(k=0;k<4;k++)
 1077   1        {
 1078   2            for(j=0;j<3;j++)
 1079   2          { 
 1080   3            lcd_set_region(40*j,40*k,40*j+39,40*k+39);    //坐标设置
 1081   3              for(i=0;i<40*40;i++)
 1082   3             {  
 1083   4              picL=*(p+i*2);  //数据低位在前
 1084   4              picH=*(p+i*2+1);        
 1085   4              lcd_writedata_16bit(picH<<8|picL);              
 1086   4             }  
 1087   3           }
 1088   2        }   
 1089   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4124     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------        250
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
