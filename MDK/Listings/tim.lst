C251 COMPILER V5.60.0,  tim                                                                25/04/24  13:33:28  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE tim
OBJECT MODULE PLACED IN .\Out_flie\tim.obj
COMPILER INVOKED BY: D:\Keil_80251\C251\BIN\C251.EXE ..\LIB\libraries\tim.c XSMALL INTR2 BROWSE INCDIR(..\LIB\startup;..
                    -\LIB\libraries;..\LIB\peripheral;..\USER\inc) DEBUG PRINT(.\Listings\tim.lst) TABS(2) OBJECT(.\Out_flie\tim.obj) 

stmt  level    source

    1          
    2          /********************************************************************************************************
             -*************
    3           * @file          tim
    4           * @date          2024-03-06
    5           * @note          
    6           ********************************************************************************************************
             -************/
    7          
    8          
    9          #include "tim.h"
   10          #include "board.h"
   11          
   12          
   13          //-------------------------------------------------------------------------------------------------------
             -------------
   14          //  @brief      定时器初始化作为外部计数
   15          //  @param      tim_n           选择模块
   16          //  @return     void
   17          
   18          //  Sample usage:               ctimer_count_init(CTIM0_P34);   //初始化定时器0，外部输入为P3.4引脚
   19          //  @note                       串口1使用定时器1作为波特率发生器，
   20          //                串口2使用定时器2作为波特率发生器，
   21          //                串口3使用定时器3作为波特率发生器，
   22          //                串口4使用定时器4作为波特率发生器，
   23          //                              STC16F仅有定时器0-定时器4，这5个定时器。
   24          //                编码器采集数据也需要定时器作为外部计数。
   25          //-------------------------------------------------------------------------------------------------------
             -------------
   26          void ctimer_count_init(CTIMN_enum tim_n)
   27          {
   28   1      
   29   1        switch(tim_n)
   30   1        {
   31   2          case CTIM0_P34:
   32   2          {
   33   3            TL0 = 0; 
   34   3            TH0 = 0; 
   35   3            TMOD |= 0x04; //外部计数模式
   36   3            TR0 = 1; //启动定时器
   37   3            break;
   38   3          }
   39   2          
   40   2          case CTIM1_P35:
   41   2          {
   42   3            TL1 = 0x00;
   43   3            TH1 = 0x00;
   44   3            TMOD |= 0x40; // 外部计数模式
   45   3            TR1 = 1; // 启动定时器
   46   3            break;
   47   3          }
   48   2          
   49   2          case CTIM2_P12:
   50   2          {
   51   3            T2L = 0x00;
   52   3            T2H = 0x00;
   53   3            AUXR |= 0x18; // 设置外部计数模式并启动定时器
   54   3            break;
C251 COMPILER V5.60.0,  tim                                                                25/04/24  13:33:28  PAGE 2   

   55   3          }
   56   2          
   57   2          case CTIM3_P04:
   58   2          {
   59   3            T3L = 0; 
   60   3            T3H = 0;
   61   3            T4T3M |= 0x0c; // 设置外部计数模式并启动定时器
   62   3            break;
   63   3          }
   64   2          
   65   2          case CTIM4_P06:
   66   2          {
   67   3            T4L = 0;
   68   3            T4H = 0;
   69   3            T4T3M |= 0xc0; // 设置外部计数模式并启动定时器
   70   3            break;
   71   3          }
   72   2        
   73   2        } 
   74   1      } 
   75          
   76          //-------------------------------------------------------------------------------------------------------
             -------------
   77          //  @brief      获取计数数值
   78          //  @param      countch     计数通道号及引脚
   79          //  @return     uint32      返回计数值
   80          //  Sample usage:           num = ctimer_count_read(CTIM0_P34);     
   81          //-------------------------------------------------------------------------------------------------------
             -------------
   82          uint16 ctimer_count_read(CTIMN_enum tim_n)
   83          {
   84   1        uint16 dat = 0;
   85   1        
   86   1        switch(tim_n)
   87   1        {
   88   2          case CTIM0_P34:
   89   2          {
   90   3            dat = (uint16)TH0 << 8;
   91   3            dat = ((uint8)TL0) | dat;
   92   3            break;
   93   3          }
   94   2          case CTIM1_P35:
   95   2          {
   96   3            dat = (uint16)TH1 << 8;
   97   3            dat = ((uint8)TL1) | dat;
   98   3            break;
   99   3          }
  100   2          case CTIM2_P12:
  101   2          {
  102   3            dat = (uint16)T2H << 8;
  103   3            dat = ((uint8)T2L) | dat;
  104   3            break;
  105   3          }
  106   2          case CTIM3_P04:
  107   2          {
  108   3            dat = (uint16)T3H << 8;
  109   3            dat = ((uint8)T3L) | dat; 
  110   3            break;
  111   3          }
  112   2          case CTIM4_P06:
  113   2          {
  114   3            dat = (uint16)T4H << 8;
  115   3            dat = ((uint8)T4L) | dat;
  116   3            break;
  117   3          }
  118   2          
C251 COMPILER V5.60.0,  tim                                                                25/04/24  13:33:28  PAGE 3   

  119   2        }
  120   1        return dat;
  121   1      }
  122          
  123          
  124          //-------------------------------------------------------------------------------------------------------
             -------------
  125          //  @brief      清除计数数值
  126          //  @param      countch     计数通道号及引脚
  127          //  @return     void      
  128          //  Sample usage:           ctimer_count_clean(CTIM0_P34);     
  129          //-------------------------------------------------------------------------------------------------------
             -------------
  130          void ctimer_count_clean(CTIMN_enum tim_n)
  131          { 
  132   1        switch(tim_n)
  133   1        {
  134   2          case CTIM0_P34:
  135   2          {
  136   3            TR0 = 0;
  137   3            TH0 = 0;
  138   3            TL0 = 0;
  139   3            TR0 = 1;
  140   3            break;
  141   3          }
  142   2          case CTIM1_P35:
  143   2          {
  144   3            TR1 = 0;
  145   3            TH1 = 0;
  146   3            TL1 = 0;
  147   3            TR1 = 1;
  148   3            break;
  149   3          }
  150   2          case CTIM2_P12:
  151   2          {
  152   3            AUXR &= ~(1<<4);
  153   3            T2H = 0;
  154   3            T2L = 0;
  155   3            AUXR |= 1<<4;
  156   3            break;
  157   3          }
  158   2          case CTIM3_P04:
  159   2          {
  160   3            T4T3M &= ~(1<<3);
  161   3            T3H = 0;
  162   3            T3L = 0;
  163   3            T4T3M |= (1<<3);
  164   3            break;
  165   3          }
  166   2          case CTIM4_P06:
  167   2          {
  168   3            T4T3M &= ~(1<<7);
  169   3            T4H = 0;
  170   3            T4L = 0;
  171   3            T4T3M |= (1<<7);
  172   3            break;
  173   3          }
  174   2        }
  175   1      }
  176          
  177          //-------------------------------------------------------------------------------------------------------
             -------------
  178          //  @brief      定时器周期中断
  179          //  @param      tim_n       定时器通道号
  180          //  @param      time_ms     时间(ms)
  181          //  @return     void      
C251 COMPILER V5.60.0,  tim                                                                25/04/24  13:33:28  PAGE 4   

  182          //  Sample usage:           pit_timer_ms(TIM_0, 10)
  183          //                使用定时器0做周期中断，时间10ms一次。
  184          //              在系统频率为56M的时候，由于计数器的限制time_ms，最大不超过10
  185          //-------------------------------------------------------------------------------------------------------
             -------------
  186          void pit_timer_ms(TIMN_enum tim_n,uint16 time_ms)
  187          {
  188   1        uint16 temp;
  189   1        temp = (uint16)65536 - (uint16)(sys_clk / (12 * (1000 / time_ms)));
  190   1        
  191   1        if(TIM_0 == tim_n)
  192   1        {
  193   2          TMOD |= 0x00;   // 模式 0
  194   2          TL0 = temp;   
  195   2          TH0 = temp >> 8;
  196   2          TR0 = 1;    // 启动定时器
  197   2          ET0 = 1;    // 使能定时器中断
  198   2        }
  199   1        else if(TIM_1 == tim_n)
  200   1        {
  201   2          TMOD |= 0x00; // 模式 0
  202   2          TL1 = temp;   
  203   2          TH1 = temp >> 8;
  204   2          TR1 = 1; // 启动定时器
  205   2          ET1 = 1; // 使能定时器中断
  206   2        }
  207   1        else if(TIM_2 == tim_n)
  208   1        {
  209   2          T2L = temp;   
  210   2          T2H = temp >> 8;
  211   2          AUXR |= 0x10; // 启动定时器
  212   2          IE2 |= 0x04; // 使能定时器中断
  213   2        }
  214   1        else if(TIM_3 == tim_n)
  215   1        {
  216   2          T3L = temp;   
  217   2          T3H = temp >> 8;
  218   2          T4T3M |= 0x08; // 启动定时器
  219   2          IE2 |= 0x20; // 使能定时器中断
  220   2        }
  221   1        else if(TIM_4 == tim_n)
  222   1        {
  223   2          T4L = temp;   
  224   2          T4H = temp >> 8;
  225   2          T4T3M |= 0x80; // 启动定时器
  226   2          IE2 |= 0x40; // 使能定时器中断
  227   2        }
  228   1      }
  229          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       380     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
C251 COMPILER V5.60.0,  tim                                                                25/04/24  13:33:28  PAGE 5   

  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
